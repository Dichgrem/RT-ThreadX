
ch6_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e90  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800411c  0800411c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004124  08004124  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800412c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  0800419c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  0800419c  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010503  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa0  00000000  00000000  000305a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00032548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00033418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224da  00000000  00000000  00034220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107b5  00000000  00000000  000566fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0fec  00000000  00000000  00066eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137e9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ec  00000000  00000000  00137eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004004 	.word	0x08004004

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	08004004 	.word	0x08004004

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    //具体哪个串口可以更改huart1为其它串口
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1 , 0xffff);
 80004d8:	1d39      	adds	r1, r7, #4
 80004da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004de:	2201      	movs	r2, #1
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <__io_putchar+0x20>)
 80004e2:	f002 fbc1 	bl	8002c68 <HAL_UART_Transmit>
    return ch;
 80004e6:	687b      	ldr	r3, [r7, #4]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	200000d8 	.word	0x200000d8

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fb70 	bl	8000bde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f823 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8d9 	bl	80006b8 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000506:	f000 f86f 	bl	80005e8 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800050a:	f000 f8a5 	bl	8000658 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* 1. LED1先以0.5s的间隔闪�??????3�?????? */
  for(int i=0; i<6; i++)
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	e00b      	b.n	800052c <main+0x38>
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);//电平翻转
 8000514:	2101      	movs	r1, #1
 8000516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051a:	f000 feb5 	bl	8001288 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800051e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000522:	f000 fbd1 	bl	8000cc8 <HAL_Delay>
  for(int i=0; i<6; i++)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3301      	adds	r3, #1
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b05      	cmp	r3, #5
 8000530:	ddf0      	ble.n	8000514 <main+0x20>
  }

  printf("System OK!\n");//打印System Init OK!
 8000532:	4803      	ldr	r0, [pc, #12]	; (8000540 <main+0x4c>)
 8000534:	f003 f8d6 	bl	80036e4 <puts>

  /* 启动TIM6 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <main+0x50>)
 800053a:	f002 f8c3 	bl	80026c4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053e:	e7fe      	b.n	800053e <main+0x4a>
 8000540:	0800401c 	.word	0x0800401c
 8000544:	2000008c 	.word	0x2000008c

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b096      	sub	sp, #88	; 0x58
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	2244      	movs	r2, #68	; 0x44
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 f84e 	bl	80035f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800056a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800056e:	f000 fecb 	bl	8001308 <HAL_PWREx_ControlVoltageScaling>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000578:	f000 f96a 	bl	8000850 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	2303      	movs	r3, #3
 800058c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 3;
 800058e:	2303      	movs	r3, #3
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000592:	2328      	movs	r3, #40	; 0x28
 8000594:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000596:	2307      	movs	r3, #7
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 ff04 	bl	80013b4 <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005b2:	f000 f94d 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2303      	movs	r3, #3
 80005bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	2104      	movs	r1, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fb10 	bl	8001bf4 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005da:	f000 f939 	bl	8000850 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3758      	adds	r7, #88	; 0x58
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_TIM6_Init+0x68>)
 80005fa:	4a16      	ldr	r2, [pc, #88]	; (8000654 <MX_TIM6_Init+0x6c>)
 80005fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000-1;
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_TIM6_Init+0x68>)
 8000600:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000604:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_TIM6_Init+0x68>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_TIM6_Init+0x68>)
 800060e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000612:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_TIM6_Init+0x68>)
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800061a:	480d      	ldr	r0, [pc, #52]	; (8000650 <MX_TIM6_Init+0x68>)
 800061c:	f001 fffa 	bl	8002614 <HAL_TIM_Base_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000626:	f000 f913 	bl	8000850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <MX_TIM6_Init+0x68>)
 8000638:	f002 fa44 	bl	8002ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000642:	f000 f905 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000008c 	.word	0x2000008c
 8000654:	40001000 	.word	0x40001000

08000658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800065e:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <MX_USART1_UART_Init+0x5c>)
 8000660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800069c:	f002 fa96 	bl	8002bcc <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006a6:	f000 f8d3 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000d8 	.word	0x200000d8
 80006b4:	40013800 	.word	0x40013800

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	4b29      	ldr	r3, [pc, #164]	; (8000774 <MX_GPIO_Init+0xbc>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a28      	ldr	r2, [pc, #160]	; (8000774 <MX_GPIO_Init+0xbc>)
 80006d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <MX_GPIO_Init+0xbc>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <MX_GPIO_Init+0xbc>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a22      	ldr	r2, [pc, #136]	; (8000774 <MX_GPIO_Init+0xbc>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_GPIO_Init+0xbc>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_GPIO_Init+0xbc>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <MX_GPIO_Init+0xbc>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_GPIO_Init+0xbc>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	2113      	movs	r1, #19
 800071a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071e:	f000 fd9b 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000722:	2313      	movs	r3, #19
 8000724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4619      	mov	r1, r3
 8000738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073c:	f000 fbfa 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : K1_Pin K2_Pin */
  GPIO_InitStruct.Pin = K1_Pin|K2_Pin;
 8000740:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000746:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800074a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074c:	2302      	movs	r3, #2
 800074e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4619      	mov	r1, r3
 8000756:	4808      	ldr	r0, [pc, #32]	; (8000778 <MX_GPIO_Init+0xc0>)
 8000758:	f000 fbec 	bl	8000f34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2100      	movs	r1, #0
 8000760:	2028      	movs	r0, #40	; 0x28
 8000762:	f000 fbb0 	bl	8000ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000766:	2028      	movs	r0, #40	; 0x28
 8000768:	f000 fbc9 	bl	8000efe <HAL_NVIC_EnableIRQ>

}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	48000400 	.word	0x48000400

0800077c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
/* EXTI回调函数 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == K1_Pin)//判断是否为K1
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800078c:	d104      	bne.n	8000798 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800078e:	2102      	movs	r1, #2
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f000 fd78 	bl	8001288 <HAL_GPIO_TogglePin>
	}
	if(HAL_GPIO_ReadPin(LED2_GPIO_Port,LED2_Pin) == GPIO_PIN_RESET)//亮
 8000798:	2102      	movs	r1, #2
 800079a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079e:	f000 fd43 	bl	8001228 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d103      	bne.n	80007b0 <HAL_GPIO_EXTI_Callback+0x34>
	{
		printf("LED2 On!\n");//\n表示换行
 80007a8:	4811      	ldr	r0, [pc, #68]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x74>)
 80007aa:	f002 ff9b 	bl	80036e4 <puts>
 80007ae:	e002      	b.n	80007b6 <HAL_GPIO_EXTI_Callback+0x3a>
	}
	else
	{
		printf("LED2 Off!\n");//\n表示换行
 80007b0:	4810      	ldr	r0, [pc, #64]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x78>)
 80007b2:	f002 ff97 	bl	80036e4 <puts>
	}
	if(GPIO_Pin == K2_Pin)//判断是否为K1
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007bc:	d104      	bne.n	80007c8 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80007be:	2110      	movs	r1, #16
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f000 fd60 	bl	8001288 <HAL_GPIO_TogglePin>
	}
	/* 亮打印LED1 On，灭打印LED1 Off，需判断 */
	if(HAL_GPIO_ReadPin(LED3_GPIO_Port,LED3_Pin) == GPIO_PIN_RESET)//亮
 80007c8:	2110      	movs	r1, #16
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	f000 fd2b 	bl	8001228 <HAL_GPIO_ReadPin>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d103      	bne.n	80007e0 <HAL_GPIO_EXTI_Callback+0x64>
	{
		printf("LED3 On!\n");//\n表示换行
 80007d8:	4807      	ldr	r0, [pc, #28]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80007da:	f002 ff83 	bl	80036e4 <puts>
	}
	else
	{
		printf("LED3 Off!\n");//\n表示换行
	}
}
 80007de:	e002      	b.n	80007e6 <HAL_GPIO_EXTI_Callback+0x6a>
		printf("LED3 Off!\n");//\n表示换行
 80007e0:	4806      	ldr	r0, [pc, #24]	; (80007fc <HAL_GPIO_EXTI_Callback+0x80>)
 80007e2:	f002 ff7f 	bl	80036e4 <puts>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	08004028 	.word	0x08004028
 80007f4:	08004034 	.word	0x08004034
 80007f8:	08004040 	.word	0x08004040
 80007fc:	0800404c 	.word	0x0800404c

08000800 <HAL_TIM_PeriodElapsedCallback>:

/* 定时器回调函�??? */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)//判断是否为TIM6
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d113      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		/* 1. 正常运行LED1间隔1s闪烁 */
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000812:	2101      	movs	r1, #1
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f000 fd36 	bl	8001288 <HAL_GPIO_TogglePin>
		/* 亮打印LED1 On，灭打印LED1 Off，需判断 */
		if(HAL_GPIO_ReadPin(LED1_GPIO_Port,LED1_Pin) == GPIO_PIN_RESET)//亮
 800081c:	2101      	movs	r1, #1
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f000 fd01 	bl	8001228 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d103      	bne.n	8000834 <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			printf("LED1 On!\n");//\n表示换行
 800082c:	4806      	ldr	r0, [pc, #24]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800082e:	f002 ff59 	bl	80036e4 <puts>
		else
		{
			printf("LED1 Off!\n");//\n表示换行
		}
	}
}
 8000832:	e002      	b.n	800083a <HAL_TIM_PeriodElapsedCallback+0x3a>
			printf("LED1 Off!\n");//\n表示换行
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000836:	f002 ff55 	bl	80036e4 <puts>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40001000 	.word	0x40001000
 8000848:	08004058 	.word	0x08004058
 800084c:	08004064 	.word	0x08004064

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x44>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_MspInit+0x44>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6613      	str	r3, [r2, #96]	; 0x60
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_MspInit+0x44>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_MspInit+0x44>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_MspInit+0x44>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6593      	str	r3, [r2, #88]	; 0x58
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x44>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <HAL_TIM_Base_MspInit+0x44>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d113      	bne.n	80008de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_TIM_Base_MspInit+0x48>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <HAL_TIM_Base_MspInit+0x48>)
 80008bc:	f043 0310 	orr.w	r3, r3, #16
 80008c0:	6593      	str	r3, [r2, #88]	; 0x58
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_TIM_Base_MspInit+0x48>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	f003 0310 	and.w	r3, r3, #16
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2036      	movs	r0, #54	; 0x36
 80008d4:	f000 faf7 	bl	8000ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008d8:	2036      	movs	r0, #54	; 0x36
 80008da:	f000 fb10 	bl	8000efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40001000 	.word	0x40001000
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0a0      	sub	sp, #128	; 0x80
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	225c      	movs	r2, #92	; 0x5c
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f002 fe71 	bl	80035f8 <memset>
  if(huart->Instance==USART1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a1f      	ldr	r2, [pc, #124]	; (8000998 <HAL_UART_MspInit+0xa8>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d137      	bne.n	8000990 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000920:	2301      	movs	r3, #1
 8000922:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fb67 	bl	8002000 <HAL_RCCEx_PeriphCLKConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000938:	f7ff ff8a 	bl	8000850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_UART_MspInit+0xac>)
 800093e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000940:	4a16      	ldr	r2, [pc, #88]	; (800099c <HAL_UART_MspInit+0xac>)
 8000942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000946:	6613      	str	r3, [r2, #96]	; 0x60
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_UART_MspInit+0xac>)
 800094a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_UART_MspInit+0xac>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000958:	4a10      	ldr	r2, [pc, #64]	; (800099c <HAL_UART_MspInit+0xac>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_UART_MspInit+0xac>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800096c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000970:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800097e:	2307      	movs	r3, #7
 8000980:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000986:	4619      	mov	r1, r3
 8000988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098c:	f000 fad2 	bl	8000f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000990:	bf00      	nop
 8000992:	3780      	adds	r7, #128	; 0x80
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40013800 	.word	0x40013800
 800099c:	40021000 	.word	0x40021000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 f94c 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K1_Pin);
 80009f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009fc:	f000 fc5e 	bl	80012bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(K2_Pin);
 8000a00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a04:	f000 fc5a 	bl	80012bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <TIM6_DAC_IRQHandler+0x10>)
 8000a12:	f001 feab 	bl	800276c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000008c 	.word	0x2000008c

08000a20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e00a      	b.n	8000a48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a32:	f3af 8000 	nop.w
 8000a36:	4601      	mov	r1, r0
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	60ba      	str	r2, [r7, #8]
 8000a3e:	b2ca      	uxtb	r2, r1
 8000a40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dbf0      	blt.n	8000a32 <_read+0x12>
	}

return len;
 8000a50:	687b      	ldr	r3, [r7, #4]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	e009      	b.n	8000a80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	60ba      	str	r2, [r7, #8]
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fd2b 	bl	80004d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	dbf1      	blt.n	8000a6c <_write+0x12>
	}
	return len;
 8000a88:	687b      	ldr	r3, [r7, #4]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <_close>:

int _close(int file)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
	return -1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aba:	605a      	str	r2, [r3, #4]
	return 0;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <_isatty>:

int _isatty(int file)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
	return 0;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b2c:	f002 fd3a 	bl	80035a4 <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20010000 	.word	0x20010000
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	2000015c 	.word	0x2000015c
 8000b64:	20000178 	.word	0x20000178

08000b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b90:	f7ff ffea 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	; (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f002 fcf9 	bl	80035b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bbe:	f7ff fc99 	bl	80004f4 <main>

08000bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bd0:	0800412c 	.word	0x0800412c
  ldr r2, =_sbss
 8000bd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bd8:	20000174 	.word	0x20000174

08000bdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_IRQHandler>

08000bde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f961 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f80e 	bl	8000c10 <HAL_InitTick>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d002      	beq.n	8000c00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	e001      	b.n	8000c04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c00:	f7ff fe2c 	bl	800085c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <HAL_InitTick+0x6c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d023      	beq.n	8000c6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <HAL_InitTick+0x70>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_InitTick+0x6c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f96d 	bl	8000f1a <HAL_SYSTICK_Config>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10f      	bne.n	8000c66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d809      	bhi.n	8000c60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f000 f937 	bl	8000ec6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_InitTick+0x74>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	e007      	b.n	8000c70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e004      	b.n	8000c70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e001      	b.n	8000c70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000160 	.word	0x20000160

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000160 	.word	0x20000160

08000cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff ffee 	bl	8000cb0 <HAL_GetTick>
 8000cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce0:	d005      	beq.n	8000cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_Delay+0x44>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cee:	bf00      	nop
 8000cf0:	f7ff ffde 	bl	8000cb0 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8f7      	bhi.n	8000cf0 <HAL_Delay+0x28>
  {
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <__NVIC_EnableIRQ+0x38>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff ff8e 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff29 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff3e 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff8e 	bl	8000e04 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5d 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff31 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffa2 	bl	8000e6c <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f42:	e154      	b.n	80011ee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	2101      	movs	r1, #1
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	4013      	ands	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 8146 	beq.w	80011e8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d005      	beq.n	8000f74 <HAL_GPIO_Init+0x40>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d130      	bne.n	8000fd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000faa:	2201      	movs	r2, #1
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	091b      	lsrs	r3, r3, #4
 8000fc0:	f003 0201 	and.w	r2, r3, #1
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d017      	beq.n	8001012 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d123      	bne.n	8001066 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	691a      	ldr	r2, [r3, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	08da      	lsrs	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3208      	adds	r2, #8
 8001060:	6939      	ldr	r1, [r7, #16]
 8001062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0203 	and.w	r2, r3, #3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 80a0 	beq.w	80011e8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a8:	4b58      	ldr	r3, [pc, #352]	; (800120c <HAL_GPIO_Init+0x2d8>)
 80010aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ac:	4a57      	ldr	r2, [pc, #348]	; (800120c <HAL_GPIO_Init+0x2d8>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6613      	str	r3, [r2, #96]	; 0x60
 80010b4:	4b55      	ldr	r3, [pc, #340]	; (800120c <HAL_GPIO_Init+0x2d8>)
 80010b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010c0:	4a53      	ldr	r2, [pc, #332]	; (8001210 <HAL_GPIO_Init+0x2dc>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ea:	d019      	beq.n	8001120 <HAL_GPIO_Init+0x1ec>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a49      	ldr	r2, [pc, #292]	; (8001214 <HAL_GPIO_Init+0x2e0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d013      	beq.n	800111c <HAL_GPIO_Init+0x1e8>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a48      	ldr	r2, [pc, #288]	; (8001218 <HAL_GPIO_Init+0x2e4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d00d      	beq.n	8001118 <HAL_GPIO_Init+0x1e4>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a47      	ldr	r2, [pc, #284]	; (800121c <HAL_GPIO_Init+0x2e8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d007      	beq.n	8001114 <HAL_GPIO_Init+0x1e0>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a46      	ldr	r2, [pc, #280]	; (8001220 <HAL_GPIO_Init+0x2ec>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d101      	bne.n	8001110 <HAL_GPIO_Init+0x1dc>
 800110c:	2304      	movs	r3, #4
 800110e:	e008      	b.n	8001122 <HAL_GPIO_Init+0x1ee>
 8001110:	2307      	movs	r3, #7
 8001112:	e006      	b.n	8001122 <HAL_GPIO_Init+0x1ee>
 8001114:	2303      	movs	r3, #3
 8001116:	e004      	b.n	8001122 <HAL_GPIO_Init+0x1ee>
 8001118:	2302      	movs	r3, #2
 800111a:	e002      	b.n	8001122 <HAL_GPIO_Init+0x1ee>
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <HAL_GPIO_Init+0x1ee>
 8001120:	2300      	movs	r3, #0
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	f002 0203 	and.w	r2, r2, #3
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	4093      	lsls	r3, r2
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001132:	4937      	ldr	r1, [pc, #220]	; (8001210 <HAL_GPIO_Init+0x2dc>)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001140:	4b38      	ldr	r3, [pc, #224]	; (8001224 <HAL_GPIO_Init+0x2f0>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001164:	4a2f      	ldr	r2, [pc, #188]	; (8001224 <HAL_GPIO_Init+0x2f0>)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800116a:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <HAL_GPIO_Init+0x2f0>)
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800118e:	4a25      	ldr	r2, [pc, #148]	; (8001224 <HAL_GPIO_Init+0x2f0>)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <HAL_GPIO_Init+0x2f0>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011b8:	4a1a      	ldr	r2, [pc, #104]	; (8001224 <HAL_GPIO_Init+0x2f0>)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_GPIO_Init+0x2f0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e2:	4a10      	ldr	r2, [pc, #64]	; (8001224 <HAL_GPIO_Init+0x2f0>)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	fa22 f303 	lsr.w	r3, r2, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f47f aea3 	bne.w	8000f44 <HAL_GPIO_Init+0x10>
  }
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000
 8001214:	48000400 	.word	0x48000400
 8001218:	48000800 	.word	0x48000800
 800121c:	48000c00 	.word	0x48000c00
 8001220:	48001000 	.word	0x48001000
 8001224:	40010400 	.word	0x40010400

08001228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	887b      	ldrh	r3, [r7, #2]
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e001      	b.n	800124a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001274:	e002      	b.n	800127c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4013      	ands	r3, r2
 80012a0:	041a      	lsls	r2, r3, #16
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43d9      	mvns	r1, r3
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	400b      	ands	r3, r1
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c8:	695a      	ldr	r2, [r3, #20]
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fa4e 	bl	800077c <HAL_GPIO_EXTI_Callback>
  }
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40010400 	.word	0x40010400

080012ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <HAL_PWREx_GetVoltageRange+0x18>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40007000 	.word	0x40007000

08001308 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001316:	d130      	bne.n	800137a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001324:	d038      	beq.n	8001398 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800132e:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001330:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001334:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2232      	movs	r2, #50	; 0x32
 800133c:	fb02 f303 	mul.w	r3, r2, r3
 8001340:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0c9b      	lsrs	r3, r3, #18
 8001348:	3301      	adds	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800134c:	e002      	b.n	8001354 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3b01      	subs	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800135c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001360:	d102      	bne.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f2      	bne.n	800134e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001374:	d110      	bne.n	8001398 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e00f      	b.n	800139a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001386:	d007      	beq.n	8001398 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001390:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001396:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40007000 	.word	0x40007000
 80013ac:	20000000 	.word	0x20000000
 80013b0:	431bde83 	.word	0x431bde83

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f000 bc10 	b.w	8001be8 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c8:	4b96      	ldr	r3, [pc, #600]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d2:	4b94      	ldr	r3, [pc, #592]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80e4 	beq.w	80015b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d007      	beq.n	8001400 <HAL_RCC_OscConfig+0x4c>
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	f040 808b 	bne.w	800150e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	f040 8087 	bne.w	800150e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001400:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_OscConfig+0x64>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e3e7      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1a      	ldr	r2, [r3, #32]
 800141c:	4b81      	ldr	r3, [pc, #516]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d004      	beq.n	8001432 <HAL_RCC_OscConfig+0x7e>
 8001428:	4b7e      	ldr	r3, [pc, #504]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001430:	e005      	b.n	800143e <HAL_RCC_OscConfig+0x8a>
 8001432:	4b7c      	ldr	r3, [pc, #496]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800143e:	4293      	cmp	r3, r2
 8001440:	d223      	bcs.n	800148a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fd7a 	bl	8001f40 <RCC_SetFlashLatencyFromMSIRange>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e3c8      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001456:	4b73      	ldr	r3, [pc, #460]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a72      	ldr	r2, [pc, #456]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b70      	ldr	r3, [pc, #448]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	496d      	ldr	r1, [pc, #436]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001474:	4b6b      	ldr	r3, [pc, #428]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	4968      	ldr	r1, [pc, #416]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
 8001488:	e025      	b.n	80014d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148a:	4b66      	ldr	r3, [pc, #408]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a65      	ldr	r2, [pc, #404]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b63      	ldr	r3, [pc, #396]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	4960      	ldr	r1, [pc, #384]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a8:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	495b      	ldr	r1, [pc, #364]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fd3a 	bl	8001f40 <RCC_SetFlashLatencyFromMSIRange>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e388      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014d6:	f000 fc6f 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 80014da:	4602      	mov	r2, r0
 80014dc:	4b51      	ldr	r3, [pc, #324]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	4950      	ldr	r1, [pc, #320]	; (8001628 <HAL_RCC_OscConfig+0x274>)
 80014e8:	5ccb      	ldrb	r3, [r1, r3]
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	fa22 f303 	lsr.w	r3, r2, r3
 80014f2:	4a4e      	ldr	r2, [pc, #312]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80014f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014f6:	4b4e      	ldr	r3, [pc, #312]	; (8001630 <HAL_RCC_OscConfig+0x27c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fb88 	bl	8000c10 <HAL_InitTick>
 8001500:	4603      	mov	r3, r0
 8001502:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d052      	beq.n	80015b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	e36c      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d032      	beq.n	800157c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001516:	4b43      	ldr	r3, [pc, #268]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a42      	ldr	r2, [pc, #264]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001522:	f7ff fbc5 	bl	8000cb0 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800152a:	f7ff fbc1 	bl	8000cb0 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e355      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800153c:	4b39      	ldr	r3, [pc, #228]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001548:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a35      	ldr	r2, [pc, #212]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b33      	ldr	r3, [pc, #204]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4930      	ldr	r1, [pc, #192]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001566:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	492b      	ldr	r1, [pc, #172]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
 800157a:	e01a      	b.n	80015b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a28      	ldr	r2, [pc, #160]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001588:	f7ff fb92 	bl	8000cb0 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001590:	f7ff fb8e 	bl	8000cb0 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e322      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1dc>
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d073      	beq.n	80016a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_OscConfig+0x21c>
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2b0c      	cmp	r3, #12
 80015c8:	d10e      	bne.n	80015e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d10b      	bne.n	80015e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d063      	beq.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d15f      	bne.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e2ff      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f0:	d106      	bne.n	8001600 <HAL_RCC_OscConfig+0x24c>
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e025      	b.n	800164c <HAL_RCC_OscConfig+0x298>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001608:	d114      	bne.n	8001634 <HAL_RCC_OscConfig+0x280>
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a02      	ldr	r2, [pc, #8]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e013      	b.n	800164c <HAL_RCC_OscConfig+0x298>
 8001624:	40021000 	.word	0x40021000
 8001628:	08004070 	.word	0x08004070
 800162c:	20000000 	.word	0x20000000
 8001630:	20000004 	.word	0x20000004
 8001634:	4ba0      	ldr	r3, [pc, #640]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a9f      	ldr	r2, [pc, #636]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800163a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b9d      	ldr	r3, [pc, #628]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a9c      	ldr	r2, [pc, #624]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff fb2c 	bl	8000cb0 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fb28 	bl	8000cb0 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e2bc      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166e:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x2a8>
 800167a:	e014      	b.n	80016a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fb18 	bl	8000cb0 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fb14 	bl	8000cb0 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e2a8      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001696:	4b88      	ldr	r3, [pc, #544]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x2d0>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d060      	beq.n	8001774 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_OscConfig+0x310>
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	d119      	bne.n	80016f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d116      	bne.n	80016f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c4:	4b7c      	ldr	r3, [pc, #496]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_OscConfig+0x328>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e285      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016dc:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	4973      	ldr	r1, [pc, #460]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f0:	e040      	b.n	8001774 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d023      	beq.n	8001742 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fa:	4b6f      	ldr	r3, [pc, #444]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a6e      	ldr	r2, [pc, #440]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001706:	f7ff fad3 	bl	8000cb0 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170e:	f7ff facf 	bl	8000cb0 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e263      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001720:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b62      	ldr	r3, [pc, #392]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	495f      	ldr	r1, [pc, #380]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
 8001740:	e018      	b.n	8001774 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001742:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a5c      	ldr	r2, [pc, #368]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800174c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff faaf 	bl	8000cb0 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff faab 	bl	8000cb0 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e23f      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001768:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d03c      	beq.n	80017fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01c      	beq.n	80017c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001788:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800178a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178e:	4a4a      	ldr	r2, [pc, #296]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff fa8a 	bl	8000cb0 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff fa86 	bl	8000cb0 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e21a      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b2:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0ef      	beq.n	80017a0 <HAL_RCC_OscConfig+0x3ec>
 80017c0:	e01b      	b.n	80017fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c2:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c8:	4a3b      	ldr	r2, [pc, #236]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d2:	f7ff fa6d 	bl	8000cb0 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017da:	f7ff fa69 	bl	8000cb0 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e1fd      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ec:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ef      	bne.n	80017da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 80a6 	beq.w	8001954 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10d      	bne.n	8001834 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181c:	4a26      	ldr	r2, [pc, #152]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800181e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001822:	6593      	str	r3, [r2, #88]	; 0x58
 8001824:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001830:	2301      	movs	r3, #1
 8001832:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_RCC_OscConfig+0x508>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d118      	bne.n	8001872 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_RCC_OscConfig+0x508>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1d      	ldr	r2, [pc, #116]	; (80018bc <HAL_RCC_OscConfig+0x508>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184c:	f7ff fa30 	bl	8000cb0 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001854:	f7ff fa2c 	bl	8000cb0 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e1c0      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_RCC_OscConfig+0x508>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <HAL_RCC_OscConfig+0x4d8>
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800187c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800188a:	e029      	b.n	80018e0 <HAL_RCC_OscConfig+0x52c>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b05      	cmp	r3, #5
 8001892:	d115      	bne.n	80018c0 <HAL_RCC_OscConfig+0x50c>
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189a:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018aa:	4a03      	ldr	r2, [pc, #12]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b4:	e014      	b.n	80018e0 <HAL_RCC_OscConfig+0x52c>
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40007000 	.word	0x40007000
 80018c0:	4b9a      	ldr	r3, [pc, #616]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c6:	4a99      	ldr	r2, [pc, #612]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d0:	4b96      	ldr	r3, [pc, #600]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d6:	4a95      	ldr	r2, [pc, #596]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 80018d8:	f023 0304 	bic.w	r3, r3, #4
 80018dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d016      	beq.n	8001916 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff f9e2 	bl	8000cb0 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7ff f9de 	bl	8000cb0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e170      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001906:	4b89      	ldr	r3, [pc, #548]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0ed      	beq.n	80018f0 <HAL_RCC_OscConfig+0x53c>
 8001914:	e015      	b.n	8001942 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7ff f9cb 	bl	8000cb0 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff f9c7 	bl	8000cb0 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	; 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e159      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001934:	4b7d      	ldr	r3, [pc, #500]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1ed      	bne.n	800191e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001942:	7ffb      	ldrb	r3, [r7, #31]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001948:	4b78      	ldr	r3, [pc, #480]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	4a77      	ldr	r2, [pc, #476]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 800194e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001952:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0320 	and.w	r3, r3, #32
 800195c:	2b00      	cmp	r3, #0
 800195e:	d03c      	beq.n	80019da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	2b00      	cmp	r3, #0
 8001966:	d01c      	beq.n	80019a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001968:	4b70      	ldr	r3, [pc, #448]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 800196a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800196e:	4a6f      	ldr	r2, [pc, #444]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7ff f99a 	bl	8000cb0 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001980:	f7ff f996 	bl	8000cb0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e12a      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001992:	4b66      	ldr	r3, [pc, #408]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001994:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0ef      	beq.n	8001980 <HAL_RCC_OscConfig+0x5cc>
 80019a0:	e01b      	b.n	80019da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019a2:	4b62      	ldr	r3, [pc, #392]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 80019a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019a8:	4a60      	ldr	r2, [pc, #384]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b2:	f7ff f97d 	bl	8000cb0 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ba:	f7ff f979 	bl	8000cb0 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e10d      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019cc:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 80019ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1ef      	bne.n	80019ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8101 	beq.w	8001be6 <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	f040 80c9 	bne.w	8001b80 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019ee:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 0203 	and.w	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d12c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d123      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d11b      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d113      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	3b01      	subs	r3, #1
 8001a42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d109      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	085b      	lsrs	r3, r3, #1
 8001a54:	3b01      	subs	r3, #1
 8001a56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d06b      	beq.n	8001b34 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	d062      	beq.n	8001b28 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a62:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0ba      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a2d      	ldr	r2, [pc, #180]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001a78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a7e:	f7ff f917 	bl	8000cb0 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a86:	f7ff f913 	bl	8000cb0 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e0a7      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_RCC_OscConfig+0x77c>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ab4:	3a01      	subs	r2, #1
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001abe:	0212      	lsls	r2, r2, #8
 8001ac0:	4311      	orrs	r1, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ac6:	0852      	lsrs	r2, r2, #1
 8001ac8:	3a01      	subs	r2, #1
 8001aca:	0552      	lsls	r2, r2, #21
 8001acc:	4311      	orrs	r1, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ad2:	0852      	lsrs	r2, r2, #1
 8001ad4:	3a01      	subs	r2, #1
 8001ad6:	0652      	lsls	r2, r2, #25
 8001ad8:	4311      	orrs	r1, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ade:	06d2      	lsls	r2, r2, #27
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	4912      	ldr	r1, [pc, #72]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ae8:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0f      	ldr	r2, [pc, #60]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b00:	f7ff f8d6 	bl	8000cb0 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff f8d2 	bl	8000cb0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e066      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b26:	e05e      	b.n	8001be6 <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e05d      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b34:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <HAL_RCC_OscConfig+0x83c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d152      	bne.n	8001be6 <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_RCC_OscConfig+0x83c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a2a      	ldr	r2, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0x83c>)
 8001b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b4c:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <HAL_RCC_OscConfig+0x83c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x83c>)
 8001b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b58:	f7ff f8aa 	bl	8000cb0 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff f8a6 	bl	8000cb0 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e03a      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <HAL_RCC_OscConfig+0x83c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x7ac>
 8001b7e:	e032      	b.n	8001be6 <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d02d      	beq.n	8001be2 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <HAL_RCC_OscConfig+0x83c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <HAL_RCC_OscConfig+0x83c>)
 8001b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b90:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_RCC_OscConfig+0x83c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d105      	bne.n	8001baa <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_RCC_OscConfig+0x83c>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <HAL_RCC_OscConfig+0x83c>)
 8001ba4:	f023 0303 	bic.w	r3, r3, #3
 8001ba8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_RCC_OscConfig+0x83c>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <HAL_RCC_OscConfig+0x83c>)
 8001bb0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bba:	f7ff f879 	bl	8000cb0 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc2:	f7ff f875 	bl	8000cb0 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e009      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_RCC_OscConfig+0x83c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f0      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x80e>
 8001be0:	e001      	b.n	8001be6 <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3720      	adds	r7, #32
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0c8      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b66      	ldr	r3, [pc, #408]	; (8001da4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d910      	bls.n	8001c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b63      	ldr	r3, [pc, #396]	; (8001da4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 0207 	bic.w	r2, r3, #7
 8001c1e:	4961      	ldr	r1, [pc, #388]	; (8001da4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b5f      	ldr	r3, [pc, #380]	; (8001da4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0b0      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d04c      	beq.n	8001cde <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4c:	4b56      	ldr	r3, [pc, #344]	; (8001da8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d121      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e09e      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c64:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d115      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e092      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c7c:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e086      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c8c:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e07e      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c9c:	4b42      	ldr	r3, [pc, #264]	; (8001da8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f023 0203 	bic.w	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	493f      	ldr	r1, [pc, #252]	; (8001da8 <HAL_RCC_ClockConfig+0x1b4>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cae:	f7fe ffff 	bl	8000cb0 <HAL_GetTick>
 8001cb2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb6:	f7fe fffb 	bl	8000cb0 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e066      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ccc:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 020c 	and.w	r2, r3, #12
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d1eb      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cea:	4b2f      	ldr	r3, [pc, #188]	; (8001da8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	492c      	ldr	r1, [pc, #176]	; (8001da8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <HAL_RCC_ClockConfig+0x1b0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d210      	bcs.n	8001d2c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 0207 	bic.w	r2, r3, #7
 8001d12:	4924      	ldr	r1, [pc, #144]	; (8001da4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e036      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4918      	ldr	r1, [pc, #96]	; (8001da8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d56:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4910      	ldr	r1, [pc, #64]	; (8001da8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d6a:	f000 f825 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	490c      	ldr	r1, [pc, #48]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	5ccb      	ldrb	r3, [r1, r3]
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	fa22 f303 	lsr.w	r3, r2, r3
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe ff3e 	bl	8000c10 <HAL_InitTick>
 8001d94:	4603      	mov	r3, r0
 8001d96:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d98:	7afb      	ldrb	r3, [r7, #11]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08004070 	.word	0x08004070
 8001db0:	20000000 	.word	0x20000000
 8001db4:	20000004 	.word	0x20000004

08001db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd0:	4b3b      	ldr	r3, [pc, #236]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x34>
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b0c      	cmp	r3, #12
 8001de4:	d121      	bne.n	8001e2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d11e      	bne.n	8001e2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dec:	4b34      	ldr	r3, [pc, #208]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001df8:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	e005      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e14:	4a2b      	ldr	r2, [pc, #172]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10d      	bne.n	8001e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d102      	bne.n	8001e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e32:	61bb      	str	r3, [r7, #24]
 8001e34:	e004      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8001e3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d134      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e46:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d003      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0xa6>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d003      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0xac>
 8001e5c:	e005      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e60:	617b      	str	r3, [r7, #20]
      break;
 8001e62:	e005      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8001e66:	617b      	str	r3, [r7, #20]
      break;
 8001e68:	e002      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	617b      	str	r3, [r7, #20]
      break;
 8001e6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	fb03 f202 	mul.w	r2, r3, r2
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	0e5b      	lsrs	r3, r3, #25
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001eb0:	69bb      	ldr	r3, [r7, #24]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	08004088 	.word	0x08004088
 8001ec8:	00f42400 	.word	0x00f42400
 8001ecc:	00b71b00 	.word	0x00b71b00

08001ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000000 	.word	0x20000000

08001ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eec:	f7ff fff0 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	4904      	ldr	r1, [pc, #16]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	08004080 	.word	0x08004080

08001f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f18:	f7ff ffda 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	0adb      	lsrs	r3, r3, #11
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4904      	ldr	r1, [pc, #16]	; (8001f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08004080 	.word	0x08004080

08001f40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f58:	f7ff f9c8 	bl	80012ec <HAL_PWREx_GetVoltageRange>
 8001f5c:	6178      	str	r0, [r7, #20]
 8001f5e:	e014      	b.n	8001f8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f60:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	4a24      	ldr	r2, [pc, #144]	; (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f6c:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f78:	f7ff f9b8 	bl	80012ec <HAL_PWREx_GetVoltageRange>
 8001f7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f90:	d10b      	bne.n	8001faa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b80      	cmp	r3, #128	; 0x80
 8001f96:	d919      	bls.n	8001fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2ba0      	cmp	r3, #160	; 0xa0
 8001f9c:	d902      	bls.n	8001fa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	e013      	b.n	8001fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	e010      	b.n	8001fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b80      	cmp	r3, #128	; 0x80
 8001fae:	d902      	bls.n	8001fb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	e00a      	b.n	8001fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b80      	cmp	r3, #128	; 0x80
 8001fba:	d102      	bne.n	8001fc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	e004      	b.n	8001fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b70      	cmp	r3, #112	; 0x70
 8001fc6:	d101      	bne.n	8001fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc8:	2301      	movs	r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 0207 	bic.w	r2, r3, #7
 8001fd4:	4909      	ldr	r1, [pc, #36]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d001      	beq.n	8001fee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40022000 	.word	0x40022000

08002000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002008:	2300      	movs	r3, #0
 800200a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800200c:	2300      	movs	r3, #0
 800200e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002018:	2b00      	cmp	r3, #0
 800201a:	d031      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002024:	d01a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002026:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800202a:	d814      	bhi.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800202c:	2b00      	cmp	r3, #0
 800202e:	d009      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002030:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002034:	d10f      	bne.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002036:	4b5d      	ldr	r3, [pc, #372]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	4a5c      	ldr	r2, [pc, #368]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002040:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002042:	e00c      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3304      	adds	r3, #4
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f9f0 	bl	8002430 <RCCEx_PLLSAI1_Config>
 8002050:	4603      	mov	r3, r0
 8002052:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002054:	e003      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	74fb      	strb	r3, [r7, #19]
      break;
 800205a:	e000      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800205c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800205e:	7cfb      	ldrb	r3, [r7, #19]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10b      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002064:	4b51      	ldr	r3, [pc, #324]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	494e      	ldr	r1, [pc, #312]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800207a:	e001      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 809e 	beq.w	80021ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002092:	4b46      	ldr	r3, [pc, #280]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80020a2:	2300      	movs	r3, #0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00d      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	4b40      	ldr	r3, [pc, #256]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	4a3f      	ldr	r2, [pc, #252]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b2:	6593      	str	r3, [r2, #88]	; 0x58
 80020b4:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c0:	2301      	movs	r3, #1
 80020c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c4:	4b3a      	ldr	r3, [pc, #232]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a39      	ldr	r2, [pc, #228]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020d0:	f7fe fdee 	bl	8000cb0 <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020d6:	e009      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d8:	f7fe fdea 	bl	8000cb0 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d902      	bls.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	74fb      	strb	r3, [r7, #19]
        break;
 80020ea:	e005      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ec:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ef      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80020f8:	7cfb      	ldrb	r3, [r7, #19]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d15a      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002108:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01e      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	429a      	cmp	r2, r3
 8002118:	d019      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002124:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002126:	4b21      	ldr	r3, [pc, #132]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800212e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800213e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002146:	4a19      	ldr	r2, [pc, #100]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d016      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7fe fdaa 	bl	8000cb0 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215e:	e00b      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7fe fda6 	bl	8000cb0 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d902      	bls.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	74fb      	strb	r3, [r7, #19]
            break;
 8002176:	e006      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0ec      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002186:	7cfb      	ldrb	r3, [r7, #19]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10b      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002192:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	4904      	ldr	r1, [pc, #16]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021a2:	e009      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	74bb      	strb	r3, [r7, #18]
 80021a8:	e006      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b8:	7c7b      	ldrb	r3, [r7, #17]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d105      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021be:	4b9b      	ldr	r3, [pc, #620]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	4a9a      	ldr	r2, [pc, #616]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021d6:	4b95      	ldr	r3, [pc, #596]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021dc:	f023 0203 	bic.w	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4991      	ldr	r1, [pc, #580]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021f8:	4b8c      	ldr	r3, [pc, #560]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fe:	f023 020c 	bic.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	4989      	ldr	r1, [pc, #548]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800221a:	4b84      	ldr	r3, [pc, #528]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002220:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	4980      	ldr	r1, [pc, #512]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800223c:	4b7b      	ldr	r3, [pc, #492]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	4978      	ldr	r1, [pc, #480]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800225e:	4b73      	ldr	r3, [pc, #460]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	496f      	ldr	r1, [pc, #444]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002280:	4b6a      	ldr	r3, [pc, #424]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4967      	ldr	r1, [pc, #412]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022a2:	4b62      	ldr	r3, [pc, #392]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80022a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	495e      	ldr	r1, [pc, #376]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022c4:	4b59      	ldr	r3, [pc, #356]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	4956      	ldr	r1, [pc, #344]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00a      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022e6:	4b51      	ldr	r3, [pc, #324]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80022e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f4:	494d      	ldr	r1, [pc, #308]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d028      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002308:	4b48      	ldr	r3, [pc, #288]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002316:	4945      	ldr	r1, [pc, #276]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002326:	d106      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002328:	4b40      	ldr	r3, [pc, #256]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a3f      	ldr	r2, [pc, #252]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800232e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002332:	60d3      	str	r3, [r2, #12]
 8002334:	e011      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800233e:	d10c      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	2101      	movs	r1, #1
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f872 	bl	8002430 <RCCEx_PLLSAI1_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d028      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002366:	4b31      	ldr	r3, [pc, #196]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002374:	492d      	ldr	r1, [pc, #180]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002384:	d106      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002386:	4b29      	ldr	r3, [pc, #164]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	4a28      	ldr	r2, [pc, #160]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800238c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002390:	60d3      	str	r3, [r2, #12]
 8002392:	e011      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800239c:	d10c      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2101      	movs	r1, #1
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 f843 	bl	8002430 <RCCEx_PLLSAI1_Config>
 80023aa:	4603      	mov	r3, r0
 80023ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01c      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d2:	4916      	ldr	r1, [pc, #88]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023e2:	d10c      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3304      	adds	r3, #4
 80023e8:	2102      	movs	r1, #2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f820 	bl	8002430 <RCCEx_PLLSAI1_Config>
 80023f0:	4603      	mov	r3, r0
 80023f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002418:	4904      	ldr	r1, [pc, #16]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002420:	7cbb      	ldrb	r3, [r7, #18]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000

08002430 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800243e:	4b74      	ldr	r3, [pc, #464]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d018      	beq.n	800247c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800244a:	4b71      	ldr	r3, [pc, #452]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0203 	and.w	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d10d      	bne.n	8002476 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
       ||
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002462:	4b6b      	ldr	r3, [pc, #428]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
       ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d047      	beq.n	8002506 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
 800247a:	e044      	b.n	8002506 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d018      	beq.n	80024b6 <RCCEx_PLLSAI1_Config+0x86>
 8002484:	2b03      	cmp	r3, #3
 8002486:	d825      	bhi.n	80024d4 <RCCEx_PLLSAI1_Config+0xa4>
 8002488:	2b01      	cmp	r3, #1
 800248a:	d002      	beq.n	8002492 <RCCEx_PLLSAI1_Config+0x62>
 800248c:	2b02      	cmp	r3, #2
 800248e:	d009      	beq.n	80024a4 <RCCEx_PLLSAI1_Config+0x74>
 8002490:	e020      	b.n	80024d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002492:	4b5f      	ldr	r3, [pc, #380]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d11d      	bne.n	80024da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a2:	e01a      	b.n	80024da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024a4:	4b5a      	ldr	r3, [pc, #360]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d116      	bne.n	80024de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b4:	e013      	b.n	80024de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024b6:	4b56      	ldr	r3, [pc, #344]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10f      	bne.n	80024e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024c2:	4b53      	ldr	r3, [pc, #332]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024d2:	e006      	b.n	80024e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
      break;
 80024d8:	e004      	b.n	80024e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024da:	bf00      	nop
 80024dc:	e002      	b.n	80024e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024de:	bf00      	nop
 80024e0:	e000      	b.n	80024e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10d      	bne.n	8002506 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024ea:	4b49      	ldr	r3, [pc, #292]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	430b      	orrs	r3, r1
 8002500:	4943      	ldr	r1, [pc, #268]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002502:	4313      	orrs	r3, r2
 8002504:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d17c      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800250c:	4b40      	ldr	r3, [pc, #256]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a3f      	ldr	r2, [pc, #252]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002512:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002518:	f7fe fbca 	bl	8000cb0 <HAL_GetTick>
 800251c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800251e:	e009      	b.n	8002534 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002520:	f7fe fbc6 	bl	8000cb0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d902      	bls.n	8002534 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	73fb      	strb	r3, [r7, #15]
        break;
 8002532:	e005      	b.n	8002540 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002534:	4b36      	ldr	r3, [pc, #216]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1ef      	bne.n	8002520 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d15f      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d110      	bne.n	800256e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800254c:	4b30      	ldr	r3, [pc, #192]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002554:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6892      	ldr	r2, [r2, #8]
 800255c:	0211      	lsls	r1, r2, #8
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68d2      	ldr	r2, [r2, #12]
 8002562:	06d2      	lsls	r2, r2, #27
 8002564:	430a      	orrs	r2, r1
 8002566:	492a      	ldr	r1, [pc, #168]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002568:	4313      	orrs	r3, r2
 800256a:	610b      	str	r3, [r1, #16]
 800256c:	e027      	b.n	80025be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d112      	bne.n	800259a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002574:	4b26      	ldr	r3, [pc, #152]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800257c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6892      	ldr	r2, [r2, #8]
 8002584:	0211      	lsls	r1, r2, #8
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6912      	ldr	r2, [r2, #16]
 800258a:	0852      	lsrs	r2, r2, #1
 800258c:	3a01      	subs	r2, #1
 800258e:	0552      	lsls	r2, r2, #21
 8002590:	430a      	orrs	r2, r1
 8002592:	491f      	ldr	r1, [pc, #124]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002594:	4313      	orrs	r3, r2
 8002596:	610b      	str	r3, [r1, #16]
 8002598:	e011      	b.n	80025be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6892      	ldr	r2, [r2, #8]
 80025aa:	0211      	lsls	r1, r2, #8
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6952      	ldr	r2, [r2, #20]
 80025b0:	0852      	lsrs	r2, r2, #1
 80025b2:	3a01      	subs	r2, #1
 80025b4:	0652      	lsls	r2, r2, #25
 80025b6:	430a      	orrs	r2, r1
 80025b8:	4915      	ldr	r1, [pc, #84]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a13      	ldr	r2, [pc, #76]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7fe fb71 	bl	8000cb0 <HAL_GetTick>
 80025ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025d0:	e009      	b.n	80025e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025d2:	f7fe fb6d 	bl	8000cb0 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d902      	bls.n	80025e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	73fb      	strb	r3, [r7, #15]
          break;
 80025e4:	e005      	b.n	80025f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0ef      	beq.n	80025d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4903      	ldr	r1, [pc, #12]	; (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002602:	4313      	orrs	r3, r2
 8002604:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e049      	b.n	80026ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe f932 	bl	80008a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3304      	adds	r3, #4
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f000 f9d2 	bl	80029fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d001      	beq.n	80026dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e03b      	b.n	8002754 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_TIM_Base_Start_IT+0x9c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d009      	beq.n	8002712 <HAL_TIM_Base_Start_IT+0x4e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002706:	d004      	beq.n	8002712 <HAL_TIM_Base_Start_IT+0x4e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a15      	ldr	r2, [pc, #84]	; (8002764 <HAL_TIM_Base_Start_IT+0xa0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d115      	bne.n	800273e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <HAL_TIM_Base_Start_IT+0xa4>)
 800271a:	4013      	ands	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b06      	cmp	r3, #6
 8002722:	d015      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x8c>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272a:	d011      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273c:	e008      	b.n	8002750 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e000      	b.n	8002752 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002750:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	40012c00 	.word	0x40012c00
 8002764:	40014000 	.word	0x40014000
 8002768:	00010007 	.word	0x00010007

0800276c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d122      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d11b      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0202 	mvn.w	r2, #2
 8002798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f905 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 80027b4:	e005      	b.n	80027c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f8f7 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f908 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d122      	bne.n	800281c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d11b      	bne.n	800281c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0204 	mvn.w	r2, #4
 80027ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2202      	movs	r2, #2
 80027f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f8db 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 8002808:	e005      	b.n	8002816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f8cd 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8de 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b08      	cmp	r3, #8
 8002828:	d122      	bne.n	8002870 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b08      	cmp	r3, #8
 8002836:	d11b      	bne.n	8002870 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0208 	mvn.w	r2, #8
 8002840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2204      	movs	r2, #4
 8002846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8b1 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 800285c:	e005      	b.n	800286a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8a3 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f8b4 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b10      	cmp	r3, #16
 800287c:	d122      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b10      	cmp	r3, #16
 800288a:	d11b      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0210 	mvn.w	r2, #16
 8002894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2208      	movs	r2, #8
 800289a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f887 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 80028b0:	e005      	b.n	80028be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f879 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f88a 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d10e      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d107      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0201 	mvn.w	r2, #1
 80028e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fd ff88 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fa:	2b80      	cmp	r3, #128	; 0x80
 80028fc:	d10e      	bne.n	800291c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d107      	bne.n	800291c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f944 	bl	8002ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292a:	d10e      	bne.n	800294a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	2b80      	cmp	r3, #128	; 0x80
 8002938:	d107      	bne.n	800294a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f937 	bl	8002bb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	2b40      	cmp	r3, #64	; 0x40
 8002956:	d10e      	bne.n	8002976 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b40      	cmp	r3, #64	; 0x40
 8002964:	d107      	bne.n	8002976 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800296e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f838 	bl	80029e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b20      	cmp	r3, #32
 8002982:	d10e      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b20      	cmp	r3, #32
 8002990:	d107      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f06f 0220 	mvn.w	r2, #32
 800299a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f8f7 	bl	8002b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a2a      	ldr	r2, [pc, #168]	; (8002ab8 <TIM_Base_SetConfig+0xbc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <TIM_Base_SetConfig+0x20>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d108      	bne.n	8002a2e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <TIM_Base_SetConfig+0xbc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00b      	beq.n	8002a4e <TIM_Base_SetConfig+0x52>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d007      	beq.n	8002a4e <TIM_Base_SetConfig+0x52>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <TIM_Base_SetConfig+0xc0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d003      	beq.n	8002a4e <TIM_Base_SetConfig+0x52>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <TIM_Base_SetConfig+0xc4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d108      	bne.n	8002a60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <TIM_Base_SetConfig+0xbc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d007      	beq.n	8002a9c <TIM_Base_SetConfig+0xa0>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a0b      	ldr	r2, [pc, #44]	; (8002abc <TIM_Base_SetConfig+0xc0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <TIM_Base_SetConfig+0xa0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <TIM_Base_SetConfig+0xc4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d103      	bne.n	8002aa4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	615a      	str	r2, [r3, #20]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40014000 	.word	0x40014000
 8002ac0:	40014400 	.word	0x40014400

08002ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e04f      	b.n	8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a21      	ldr	r2, [pc, #132]	; (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d108      	bne.n	8002b18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d009      	beq.n	8002b50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b44:	d004      	beq.n	8002b50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a10      	ldr	r2, [pc, #64]	; (8002b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d10c      	bne.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40012c00 	.word	0x40012c00
 8002b8c:	40014000 	.word	0x40014000

08002b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e040      	b.n	8002c60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fd fe7e 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2224      	movs	r2, #36	; 0x24
 8002bf8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f8c0 	bl	8002d90 <UART_SetConfig>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e022      	b.n	8002c60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fb0e 	bl	8003244 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fb95 	bl	8003388 <UART_CheckIdleState>
 8002c5e:	4603      	mov	r3, r0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	f040 8082 	bne.w	8002d86 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_UART_Transmit+0x26>
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e07a      	b.n	8002d88 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_UART_Transmit+0x38>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e073      	b.n	8002d88 <HAL_UART_Transmit+0x120>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2221      	movs	r2, #33	; 0x21
 8002cb4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cb6:	f7fd fffb 	bl	8000cb0 <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	88fa      	ldrh	r2, [r7, #6]
 8002cc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd4:	d108      	bne.n	8002ce8 <HAL_UART_Transmit+0x80>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d104      	bne.n	8002ce8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e003      	b.n	8002cf0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002cf8:	e02d      	b.n	8002d56 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fb88 	bl	800341a <UART_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e039      	b.n	8002d88 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10b      	bne.n	8002d32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	881a      	ldrh	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d26:	b292      	uxth	r2, r2
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e008      	b.n	8002d44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	b292      	uxth	r2, r2
 8002d3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3301      	adds	r3, #1
 8002d42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1cb      	bne.n	8002cfa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2140      	movs	r1, #64	; 0x40
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fb54 	bl	800341a <UART_WaitOnFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e005      	b.n	8002d88 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
  }
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d94:	b08a      	sub	sp, #40	; 0x28
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4b9e      	ldr	r3, [pc, #632]	; (8003038 <UART_SetConfig+0x2a8>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a93      	ldr	r2, [pc, #588]	; (800303c <UART_SetConfig+0x2ac>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a8a      	ldr	r2, [pc, #552]	; (8003040 <UART_SetConfig+0x2b0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d126      	bne.n	8002e68 <UART_SetConfig+0xd8>
 8002e1a:	4b8a      	ldr	r3, [pc, #552]	; (8003044 <UART_SetConfig+0x2b4>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d81b      	bhi.n	8002e60 <UART_SetConfig+0xd0>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <UART_SetConfig+0xa0>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e41 	.word	0x08002e41
 8002e34:	08002e51 	.word	0x08002e51
 8002e38:	08002e49 	.word	0x08002e49
 8002e3c:	08002e59 	.word	0x08002e59
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e46:	e0ab      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e4e:	e0a7      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002e50:	2304      	movs	r3, #4
 8002e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e56:	e0a3      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002e58:	2308      	movs	r3, #8
 8002e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e5e:	e09f      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002e60:	2310      	movs	r3, #16
 8002e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e66:	e09b      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a76      	ldr	r2, [pc, #472]	; (8003048 <UART_SetConfig+0x2b8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d138      	bne.n	8002ee4 <UART_SetConfig+0x154>
 8002e72:	4b74      	ldr	r3, [pc, #464]	; (8003044 <UART_SetConfig+0x2b4>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b0c      	cmp	r3, #12
 8002e7e:	d82d      	bhi.n	8002edc <UART_SetConfig+0x14c>
 8002e80:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <UART_SetConfig+0xf8>)
 8002e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e86:	bf00      	nop
 8002e88:	08002ebd 	.word	0x08002ebd
 8002e8c:	08002edd 	.word	0x08002edd
 8002e90:	08002edd 	.word	0x08002edd
 8002e94:	08002edd 	.word	0x08002edd
 8002e98:	08002ecd 	.word	0x08002ecd
 8002e9c:	08002edd 	.word	0x08002edd
 8002ea0:	08002edd 	.word	0x08002edd
 8002ea4:	08002edd 	.word	0x08002edd
 8002ea8:	08002ec5 	.word	0x08002ec5
 8002eac:	08002edd 	.word	0x08002edd
 8002eb0:	08002edd 	.word	0x08002edd
 8002eb4:	08002edd 	.word	0x08002edd
 8002eb8:	08002ed5 	.word	0x08002ed5
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ec2:	e06d      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eca:	e069      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ed2:	e065      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eda:	e061      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002edc:	2310      	movs	r3, #16
 8002ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ee2:	e05d      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a58      	ldr	r2, [pc, #352]	; (800304c <UART_SetConfig+0x2bc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d125      	bne.n	8002f3a <UART_SetConfig+0x1aa>
 8002eee:	4b55      	ldr	r3, [pc, #340]	; (8003044 <UART_SetConfig+0x2b4>)
 8002ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ef8:	2b30      	cmp	r3, #48	; 0x30
 8002efa:	d016      	beq.n	8002f2a <UART_SetConfig+0x19a>
 8002efc:	2b30      	cmp	r3, #48	; 0x30
 8002efe:	d818      	bhi.n	8002f32 <UART_SetConfig+0x1a2>
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d00a      	beq.n	8002f1a <UART_SetConfig+0x18a>
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d814      	bhi.n	8002f32 <UART_SetConfig+0x1a2>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <UART_SetConfig+0x182>
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d008      	beq.n	8002f22 <UART_SetConfig+0x192>
 8002f10:	e00f      	b.n	8002f32 <UART_SetConfig+0x1a2>
 8002f12:	2300      	movs	r3, #0
 8002f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f18:	e042      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f20:	e03e      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002f22:	2304      	movs	r3, #4
 8002f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f28:	e03a      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002f2a:	2308      	movs	r3, #8
 8002f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f30:	e036      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002f32:	2310      	movs	r3, #16
 8002f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f38:	e032      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a3f      	ldr	r2, [pc, #252]	; (800303c <UART_SetConfig+0x2ac>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d12a      	bne.n	8002f9a <UART_SetConfig+0x20a>
 8002f44:	4b3f      	ldr	r3, [pc, #252]	; (8003044 <UART_SetConfig+0x2b4>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f52:	d01a      	beq.n	8002f8a <UART_SetConfig+0x1fa>
 8002f54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f58:	d81b      	bhi.n	8002f92 <UART_SetConfig+0x202>
 8002f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f5e:	d00c      	beq.n	8002f7a <UART_SetConfig+0x1ea>
 8002f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f64:	d815      	bhi.n	8002f92 <UART_SetConfig+0x202>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <UART_SetConfig+0x1e2>
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6e:	d008      	beq.n	8002f82 <UART_SetConfig+0x1f2>
 8002f70:	e00f      	b.n	8002f92 <UART_SetConfig+0x202>
 8002f72:	2300      	movs	r3, #0
 8002f74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f78:	e012      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f80:	e00e      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002f82:	2304      	movs	r3, #4
 8002f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f88:	e00a      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f90:	e006      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002f92:	2310      	movs	r3, #16
 8002f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f98:	e002      	b.n	8002fa0 <UART_SetConfig+0x210>
 8002f9a:	2310      	movs	r3, #16
 8002f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a25      	ldr	r2, [pc, #148]	; (800303c <UART_SetConfig+0x2ac>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	f040 808a 	bne.w	80030c0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d824      	bhi.n	8002ffe <UART_SetConfig+0x26e>
 8002fb4:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <UART_SetConfig+0x22c>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08002fe1 	.word	0x08002fe1
 8002fc0:	08002fff 	.word	0x08002fff
 8002fc4:	08002fe9 	.word	0x08002fe9
 8002fc8:	08002fff 	.word	0x08002fff
 8002fcc:	08002fef 	.word	0x08002fef
 8002fd0:	08002fff 	.word	0x08002fff
 8002fd4:	08002fff 	.word	0x08002fff
 8002fd8:	08002fff 	.word	0x08002fff
 8002fdc:	08002ff7 	.word	0x08002ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe0:	f7fe ff82 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 8002fe4:	61f8      	str	r0, [r7, #28]
        break;
 8002fe6:	e010      	b.n	800300a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <UART_SetConfig+0x2c0>)
 8002fea:	61fb      	str	r3, [r7, #28]
        break;
 8002fec:	e00d      	b.n	800300a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fee:	f7fe fee3 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8002ff2:	61f8      	str	r0, [r7, #28]
        break;
 8002ff4:	e009      	b.n	800300a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffa:	61fb      	str	r3, [r7, #28]
        break;
 8002ffc:	e005      	b.n	800300a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003008:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8109 	beq.w	8003224 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	429a      	cmp	r2, r3
 8003020:	d305      	bcc.n	800302e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	429a      	cmp	r2, r3
 800302c:	d912      	bls.n	8003054 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003034:	e0f6      	b.n	8003224 <UART_SetConfig+0x494>
 8003036:	bf00      	nop
 8003038:	efff69f3 	.word	0xefff69f3
 800303c:	40008000 	.word	0x40008000
 8003040:	40013800 	.word	0x40013800
 8003044:	40021000 	.word	0x40021000
 8003048:	40004400 	.word	0x40004400
 800304c:	40004800 	.word	0x40004800
 8003050:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2200      	movs	r2, #0
 8003058:	461c      	mov	r4, r3
 800305a:	4615      	mov	r5, r2
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	022b      	lsls	r3, r5, #8
 8003066:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800306a:	0222      	lsls	r2, r4, #8
 800306c:	68f9      	ldr	r1, [r7, #12]
 800306e:	6849      	ldr	r1, [r1, #4]
 8003070:	0849      	lsrs	r1, r1, #1
 8003072:	2000      	movs	r0, #0
 8003074:	4688      	mov	r8, r1
 8003076:	4681      	mov	r9, r0
 8003078:	eb12 0a08 	adds.w	sl, r2, r8
 800307c:	eb43 0b09 	adc.w	fp, r3, r9
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800308e:	4650      	mov	r0, sl
 8003090:	4659      	mov	r1, fp
 8003092:	f7fd f89b 	bl	80001cc <__aeabi_uldivmod>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4613      	mov	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030a4:	d308      	bcc.n	80030b8 <UART_SetConfig+0x328>
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ac:	d204      	bcs.n	80030b8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	e0b5      	b.n	8003224 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030be:	e0b1      	b.n	8003224 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c8:	d15d      	bne.n	8003186 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80030ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d827      	bhi.n	8003122 <UART_SetConfig+0x392>
 80030d2:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <UART_SetConfig+0x348>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080030fd 	.word	0x080030fd
 80030dc:	08003105 	.word	0x08003105
 80030e0:	0800310d 	.word	0x0800310d
 80030e4:	08003123 	.word	0x08003123
 80030e8:	08003113 	.word	0x08003113
 80030ec:	08003123 	.word	0x08003123
 80030f0:	08003123 	.word	0x08003123
 80030f4:	08003123 	.word	0x08003123
 80030f8:	0800311b 	.word	0x0800311b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030fc:	f7fe fef4 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 8003100:	61f8      	str	r0, [r7, #28]
        break;
 8003102:	e014      	b.n	800312e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003104:	f7fe ff06 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8003108:	61f8      	str	r0, [r7, #28]
        break;
 800310a:	e010      	b.n	800312e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800310c:	4b4c      	ldr	r3, [pc, #304]	; (8003240 <UART_SetConfig+0x4b0>)
 800310e:	61fb      	str	r3, [r7, #28]
        break;
 8003110:	e00d      	b.n	800312e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003112:	f7fe fe51 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8003116:	61f8      	str	r0, [r7, #28]
        break;
 8003118:	e009      	b.n	800312e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800311a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800311e:	61fb      	str	r3, [r7, #28]
        break;
 8003120:	e005      	b.n	800312e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800312c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d077      	beq.n	8003224 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	005a      	lsls	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	085b      	lsrs	r3, r3, #1
 800313e:	441a      	add	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2b0f      	cmp	r3, #15
 800314e:	d916      	bls.n	800317e <UART_SetConfig+0x3ee>
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003156:	d212      	bcs.n	800317e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	b29b      	uxth	r3, r3
 800315c:	f023 030f 	bic.w	r3, r3, #15
 8003160:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	b29b      	uxth	r3, r3
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	b29a      	uxth	r2, r3
 800316e:	8afb      	ldrh	r3, [r7, #22]
 8003170:	4313      	orrs	r3, r2
 8003172:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	8afa      	ldrh	r2, [r7, #22]
 800317a:	60da      	str	r2, [r3, #12]
 800317c:	e052      	b.n	8003224 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003184:	e04e      	b.n	8003224 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800318a:	2b08      	cmp	r3, #8
 800318c:	d827      	bhi.n	80031de <UART_SetConfig+0x44e>
 800318e:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <UART_SetConfig+0x404>)
 8003190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003194:	080031b9 	.word	0x080031b9
 8003198:	080031c1 	.word	0x080031c1
 800319c:	080031c9 	.word	0x080031c9
 80031a0:	080031df 	.word	0x080031df
 80031a4:	080031cf 	.word	0x080031cf
 80031a8:	080031df 	.word	0x080031df
 80031ac:	080031df 	.word	0x080031df
 80031b0:	080031df 	.word	0x080031df
 80031b4:	080031d7 	.word	0x080031d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b8:	f7fe fe96 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 80031bc:	61f8      	str	r0, [r7, #28]
        break;
 80031be:	e014      	b.n	80031ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031c0:	f7fe fea8 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 80031c4:	61f8      	str	r0, [r7, #28]
        break;
 80031c6:	e010      	b.n	80031ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <UART_SetConfig+0x4b0>)
 80031ca:	61fb      	str	r3, [r7, #28]
        break;
 80031cc:	e00d      	b.n	80031ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ce:	f7fe fdf3 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 80031d2:	61f8      	str	r0, [r7, #28]
        break;
 80031d4:	e009      	b.n	80031ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031da:	61fb      	str	r3, [r7, #28]
        break;
 80031dc:	e005      	b.n	80031ea <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031e8:	bf00      	nop
    }

    if (pclk != 0U)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d019      	beq.n	8003224 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	085a      	lsrs	r2, r3, #1
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	441a      	add	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003202:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b0f      	cmp	r3, #15
 8003208:	d909      	bls.n	800321e <UART_SetConfig+0x48e>
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003210:	d205      	bcs.n	800321e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60da      	str	r2, [r3, #12]
 800321c:	e002      	b.n	8003224 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003230:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003234:	4618      	mov	r0, r3
 8003236:	3728      	adds	r7, #40	; 0x28
 8003238:	46bd      	mov	sp, r7
 800323a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800323e:	bf00      	nop
 8003240:	00f42400 	.word	0x00f42400

08003244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01a      	beq.n	800335a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003342:	d10a      	bne.n	800335a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
  }
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af02      	add	r7, sp, #8
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003398:	f7fd fc8a 	bl	8000cb0 <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d10e      	bne.n	80033ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f82d 	bl	800341a <UART_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e023      	b.n	8003412 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d10e      	bne.n	80033f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f817 	bl	800341a <UART_WaitOnFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e00d      	b.n	8003412 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b09c      	sub	sp, #112	; 0x70
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	4613      	mov	r3, r2
 8003428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800342a:	e0a5      	b.n	8003578 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	f000 80a1 	beq.w	8003578 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003436:	f7fd fc3b 	bl	8000cb0 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <UART_WaitOnFlagUntilTimeout+0x32>
 8003446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003448:	2b00      	cmp	r3, #0
 800344a:	d13e      	bne.n	80034ca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003454:	e853 3f00 	ldrex	r3, [r3]
 8003458:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800345a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800345c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003460:	667b      	str	r3, [r7, #100]	; 0x64
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800346a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800346c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003470:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1e6      	bne.n	800344c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3308      	adds	r3, #8
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	663b      	str	r3, [r7, #96]	; 0x60
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3308      	adds	r3, #8
 800349c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800349e:	64ba      	str	r2, [r7, #72]	; 0x48
 80034a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80034ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e5      	bne.n	800347e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e067      	b.n	800359a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d04f      	beq.n	8003578 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e6:	d147      	bne.n	8003578 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034f0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	e853 3f00 	ldrex	r3, [r3]
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003510:	637b      	str	r3, [r7, #52]	; 0x34
 8003512:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003514:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003518:	e841 2300 	strex	r3, r2, [r1]
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e6      	bne.n	80034f2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3308      	adds	r3, #8
 800352a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	e853 3f00 	ldrex	r3, [r3]
 8003532:	613b      	str	r3, [r7, #16]
   return(result);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f023 0301 	bic.w	r3, r3, #1
 800353a:	66bb      	str	r3, [r7, #104]	; 0x68
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3308      	adds	r3, #8
 8003542:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003544:	623a      	str	r2, [r7, #32]
 8003546:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003548:	69f9      	ldr	r1, [r7, #28]
 800354a:	6a3a      	ldr	r2, [r7, #32]
 800354c:	e841 2300 	strex	r3, r2, [r1]
 8003550:	61bb      	str	r3, [r7, #24]
   return(result);
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1e5      	bne.n	8003524 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e010      	b.n	800359a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69da      	ldr	r2, [r3, #28]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	429a      	cmp	r2, r3
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	429a      	cmp	r2, r3
 8003594:	f43f af4a 	beq.w	800342c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3770      	adds	r7, #112	; 0x70
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <__errno>:
 80035a4:	4b01      	ldr	r3, [pc, #4]	; (80035ac <__errno+0x8>)
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	2000000c 	.word	0x2000000c

080035b0 <__libc_init_array>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	4d0d      	ldr	r5, [pc, #52]	; (80035e8 <__libc_init_array+0x38>)
 80035b4:	4c0d      	ldr	r4, [pc, #52]	; (80035ec <__libc_init_array+0x3c>)
 80035b6:	1b64      	subs	r4, r4, r5
 80035b8:	10a4      	asrs	r4, r4, #2
 80035ba:	2600      	movs	r6, #0
 80035bc:	42a6      	cmp	r6, r4
 80035be:	d109      	bne.n	80035d4 <__libc_init_array+0x24>
 80035c0:	4d0b      	ldr	r5, [pc, #44]	; (80035f0 <__libc_init_array+0x40>)
 80035c2:	4c0c      	ldr	r4, [pc, #48]	; (80035f4 <__libc_init_array+0x44>)
 80035c4:	f000 fd1e 	bl	8004004 <_init>
 80035c8:	1b64      	subs	r4, r4, r5
 80035ca:	10a4      	asrs	r4, r4, #2
 80035cc:	2600      	movs	r6, #0
 80035ce:	42a6      	cmp	r6, r4
 80035d0:	d105      	bne.n	80035de <__libc_init_array+0x2e>
 80035d2:	bd70      	pop	{r4, r5, r6, pc}
 80035d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d8:	4798      	blx	r3
 80035da:	3601      	adds	r6, #1
 80035dc:	e7ee      	b.n	80035bc <__libc_init_array+0xc>
 80035de:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e2:	4798      	blx	r3
 80035e4:	3601      	adds	r6, #1
 80035e6:	e7f2      	b.n	80035ce <__libc_init_array+0x1e>
 80035e8:	08004124 	.word	0x08004124
 80035ec:	08004124 	.word	0x08004124
 80035f0:	08004124 	.word	0x08004124
 80035f4:	08004128 	.word	0x08004128

080035f8 <memset>:
 80035f8:	4402      	add	r2, r0
 80035fa:	4603      	mov	r3, r0
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d100      	bne.n	8003602 <memset+0xa>
 8003600:	4770      	bx	lr
 8003602:	f803 1b01 	strb.w	r1, [r3], #1
 8003606:	e7f9      	b.n	80035fc <memset+0x4>

08003608 <_puts_r>:
 8003608:	b570      	push	{r4, r5, r6, lr}
 800360a:	460e      	mov	r6, r1
 800360c:	4605      	mov	r5, r0
 800360e:	b118      	cbz	r0, 8003618 <_puts_r+0x10>
 8003610:	6983      	ldr	r3, [r0, #24]
 8003612:	b90b      	cbnz	r3, 8003618 <_puts_r+0x10>
 8003614:	f000 fa48 	bl	8003aa8 <__sinit>
 8003618:	69ab      	ldr	r3, [r5, #24]
 800361a:	68ac      	ldr	r4, [r5, #8]
 800361c:	b913      	cbnz	r3, 8003624 <_puts_r+0x1c>
 800361e:	4628      	mov	r0, r5
 8003620:	f000 fa42 	bl	8003aa8 <__sinit>
 8003624:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <_puts_r+0xd0>)
 8003626:	429c      	cmp	r4, r3
 8003628:	d120      	bne.n	800366c <_puts_r+0x64>
 800362a:	686c      	ldr	r4, [r5, #4]
 800362c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800362e:	07db      	lsls	r3, r3, #31
 8003630:	d405      	bmi.n	800363e <_puts_r+0x36>
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	0598      	lsls	r0, r3, #22
 8003636:	d402      	bmi.n	800363e <_puts_r+0x36>
 8003638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800363a:	f000 fad3 	bl	8003be4 <__retarget_lock_acquire_recursive>
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	0719      	lsls	r1, r3, #28
 8003642:	d51d      	bpl.n	8003680 <_puts_r+0x78>
 8003644:	6923      	ldr	r3, [r4, #16]
 8003646:	b1db      	cbz	r3, 8003680 <_puts_r+0x78>
 8003648:	3e01      	subs	r6, #1
 800364a:	68a3      	ldr	r3, [r4, #8]
 800364c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003650:	3b01      	subs	r3, #1
 8003652:	60a3      	str	r3, [r4, #8]
 8003654:	bb39      	cbnz	r1, 80036a6 <_puts_r+0x9e>
 8003656:	2b00      	cmp	r3, #0
 8003658:	da38      	bge.n	80036cc <_puts_r+0xc4>
 800365a:	4622      	mov	r2, r4
 800365c:	210a      	movs	r1, #10
 800365e:	4628      	mov	r0, r5
 8003660:	f000 f848 	bl	80036f4 <__swbuf_r>
 8003664:	3001      	adds	r0, #1
 8003666:	d011      	beq.n	800368c <_puts_r+0x84>
 8003668:	250a      	movs	r5, #10
 800366a:	e011      	b.n	8003690 <_puts_r+0x88>
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <_puts_r+0xd4>)
 800366e:	429c      	cmp	r4, r3
 8003670:	d101      	bne.n	8003676 <_puts_r+0x6e>
 8003672:	68ac      	ldr	r4, [r5, #8]
 8003674:	e7da      	b.n	800362c <_puts_r+0x24>
 8003676:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <_puts_r+0xd8>)
 8003678:	429c      	cmp	r4, r3
 800367a:	bf08      	it	eq
 800367c:	68ec      	ldreq	r4, [r5, #12]
 800367e:	e7d5      	b.n	800362c <_puts_r+0x24>
 8003680:	4621      	mov	r1, r4
 8003682:	4628      	mov	r0, r5
 8003684:	f000 f888 	bl	8003798 <__swsetup_r>
 8003688:	2800      	cmp	r0, #0
 800368a:	d0dd      	beq.n	8003648 <_puts_r+0x40>
 800368c:	f04f 35ff 	mov.w	r5, #4294967295
 8003690:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003692:	07da      	lsls	r2, r3, #31
 8003694:	d405      	bmi.n	80036a2 <_puts_r+0x9a>
 8003696:	89a3      	ldrh	r3, [r4, #12]
 8003698:	059b      	lsls	r3, r3, #22
 800369a:	d402      	bmi.n	80036a2 <_puts_r+0x9a>
 800369c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800369e:	f000 faa2 	bl	8003be6 <__retarget_lock_release_recursive>
 80036a2:	4628      	mov	r0, r5
 80036a4:	bd70      	pop	{r4, r5, r6, pc}
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da04      	bge.n	80036b4 <_puts_r+0xac>
 80036aa:	69a2      	ldr	r2, [r4, #24]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	dc06      	bgt.n	80036be <_puts_r+0xb6>
 80036b0:	290a      	cmp	r1, #10
 80036b2:	d004      	beq.n	80036be <_puts_r+0xb6>
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	6022      	str	r2, [r4, #0]
 80036ba:	7019      	strb	r1, [r3, #0]
 80036bc:	e7c5      	b.n	800364a <_puts_r+0x42>
 80036be:	4622      	mov	r2, r4
 80036c0:	4628      	mov	r0, r5
 80036c2:	f000 f817 	bl	80036f4 <__swbuf_r>
 80036c6:	3001      	adds	r0, #1
 80036c8:	d1bf      	bne.n	800364a <_puts_r+0x42>
 80036ca:	e7df      	b.n	800368c <_puts_r+0x84>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	250a      	movs	r5, #10
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	6022      	str	r2, [r4, #0]
 80036d4:	701d      	strb	r5, [r3, #0]
 80036d6:	e7db      	b.n	8003690 <_puts_r+0x88>
 80036d8:	080040dc 	.word	0x080040dc
 80036dc:	080040fc 	.word	0x080040fc
 80036e0:	080040bc 	.word	0x080040bc

080036e4 <puts>:
 80036e4:	4b02      	ldr	r3, [pc, #8]	; (80036f0 <puts+0xc>)
 80036e6:	4601      	mov	r1, r0
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	f7ff bf8d 	b.w	8003608 <_puts_r>
 80036ee:	bf00      	nop
 80036f0:	2000000c 	.word	0x2000000c

080036f4 <__swbuf_r>:
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	460e      	mov	r6, r1
 80036f8:	4614      	mov	r4, r2
 80036fa:	4605      	mov	r5, r0
 80036fc:	b118      	cbz	r0, 8003706 <__swbuf_r+0x12>
 80036fe:	6983      	ldr	r3, [r0, #24]
 8003700:	b90b      	cbnz	r3, 8003706 <__swbuf_r+0x12>
 8003702:	f000 f9d1 	bl	8003aa8 <__sinit>
 8003706:	4b21      	ldr	r3, [pc, #132]	; (800378c <__swbuf_r+0x98>)
 8003708:	429c      	cmp	r4, r3
 800370a:	d12b      	bne.n	8003764 <__swbuf_r+0x70>
 800370c:	686c      	ldr	r4, [r5, #4]
 800370e:	69a3      	ldr	r3, [r4, #24]
 8003710:	60a3      	str	r3, [r4, #8]
 8003712:	89a3      	ldrh	r3, [r4, #12]
 8003714:	071a      	lsls	r2, r3, #28
 8003716:	d52f      	bpl.n	8003778 <__swbuf_r+0x84>
 8003718:	6923      	ldr	r3, [r4, #16]
 800371a:	b36b      	cbz	r3, 8003778 <__swbuf_r+0x84>
 800371c:	6923      	ldr	r3, [r4, #16]
 800371e:	6820      	ldr	r0, [r4, #0]
 8003720:	1ac0      	subs	r0, r0, r3
 8003722:	6963      	ldr	r3, [r4, #20]
 8003724:	b2f6      	uxtb	r6, r6
 8003726:	4283      	cmp	r3, r0
 8003728:	4637      	mov	r7, r6
 800372a:	dc04      	bgt.n	8003736 <__swbuf_r+0x42>
 800372c:	4621      	mov	r1, r4
 800372e:	4628      	mov	r0, r5
 8003730:	f000 f926 	bl	8003980 <_fflush_r>
 8003734:	bb30      	cbnz	r0, 8003784 <__swbuf_r+0x90>
 8003736:	68a3      	ldr	r3, [r4, #8]
 8003738:	3b01      	subs	r3, #1
 800373a:	60a3      	str	r3, [r4, #8]
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	6022      	str	r2, [r4, #0]
 8003742:	701e      	strb	r6, [r3, #0]
 8003744:	6963      	ldr	r3, [r4, #20]
 8003746:	3001      	adds	r0, #1
 8003748:	4283      	cmp	r3, r0
 800374a:	d004      	beq.n	8003756 <__swbuf_r+0x62>
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	07db      	lsls	r3, r3, #31
 8003750:	d506      	bpl.n	8003760 <__swbuf_r+0x6c>
 8003752:	2e0a      	cmp	r6, #10
 8003754:	d104      	bne.n	8003760 <__swbuf_r+0x6c>
 8003756:	4621      	mov	r1, r4
 8003758:	4628      	mov	r0, r5
 800375a:	f000 f911 	bl	8003980 <_fflush_r>
 800375e:	b988      	cbnz	r0, 8003784 <__swbuf_r+0x90>
 8003760:	4638      	mov	r0, r7
 8003762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <__swbuf_r+0x9c>)
 8003766:	429c      	cmp	r4, r3
 8003768:	d101      	bne.n	800376e <__swbuf_r+0x7a>
 800376a:	68ac      	ldr	r4, [r5, #8]
 800376c:	e7cf      	b.n	800370e <__swbuf_r+0x1a>
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <__swbuf_r+0xa0>)
 8003770:	429c      	cmp	r4, r3
 8003772:	bf08      	it	eq
 8003774:	68ec      	ldreq	r4, [r5, #12]
 8003776:	e7ca      	b.n	800370e <__swbuf_r+0x1a>
 8003778:	4621      	mov	r1, r4
 800377a:	4628      	mov	r0, r5
 800377c:	f000 f80c 	bl	8003798 <__swsetup_r>
 8003780:	2800      	cmp	r0, #0
 8003782:	d0cb      	beq.n	800371c <__swbuf_r+0x28>
 8003784:	f04f 37ff 	mov.w	r7, #4294967295
 8003788:	e7ea      	b.n	8003760 <__swbuf_r+0x6c>
 800378a:	bf00      	nop
 800378c:	080040dc 	.word	0x080040dc
 8003790:	080040fc 	.word	0x080040fc
 8003794:	080040bc 	.word	0x080040bc

08003798 <__swsetup_r>:
 8003798:	4b32      	ldr	r3, [pc, #200]	; (8003864 <__swsetup_r+0xcc>)
 800379a:	b570      	push	{r4, r5, r6, lr}
 800379c:	681d      	ldr	r5, [r3, #0]
 800379e:	4606      	mov	r6, r0
 80037a0:	460c      	mov	r4, r1
 80037a2:	b125      	cbz	r5, 80037ae <__swsetup_r+0x16>
 80037a4:	69ab      	ldr	r3, [r5, #24]
 80037a6:	b913      	cbnz	r3, 80037ae <__swsetup_r+0x16>
 80037a8:	4628      	mov	r0, r5
 80037aa:	f000 f97d 	bl	8003aa8 <__sinit>
 80037ae:	4b2e      	ldr	r3, [pc, #184]	; (8003868 <__swsetup_r+0xd0>)
 80037b0:	429c      	cmp	r4, r3
 80037b2:	d10f      	bne.n	80037d4 <__swsetup_r+0x3c>
 80037b4:	686c      	ldr	r4, [r5, #4]
 80037b6:	89a3      	ldrh	r3, [r4, #12]
 80037b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037bc:	0719      	lsls	r1, r3, #28
 80037be:	d42c      	bmi.n	800381a <__swsetup_r+0x82>
 80037c0:	06dd      	lsls	r5, r3, #27
 80037c2:	d411      	bmi.n	80037e8 <__swsetup_r+0x50>
 80037c4:	2309      	movs	r3, #9
 80037c6:	6033      	str	r3, [r6, #0]
 80037c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037cc:	81a3      	strh	r3, [r4, #12]
 80037ce:	f04f 30ff 	mov.w	r0, #4294967295
 80037d2:	e03e      	b.n	8003852 <__swsetup_r+0xba>
 80037d4:	4b25      	ldr	r3, [pc, #148]	; (800386c <__swsetup_r+0xd4>)
 80037d6:	429c      	cmp	r4, r3
 80037d8:	d101      	bne.n	80037de <__swsetup_r+0x46>
 80037da:	68ac      	ldr	r4, [r5, #8]
 80037dc:	e7eb      	b.n	80037b6 <__swsetup_r+0x1e>
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <__swsetup_r+0xd8>)
 80037e0:	429c      	cmp	r4, r3
 80037e2:	bf08      	it	eq
 80037e4:	68ec      	ldreq	r4, [r5, #12]
 80037e6:	e7e6      	b.n	80037b6 <__swsetup_r+0x1e>
 80037e8:	0758      	lsls	r0, r3, #29
 80037ea:	d512      	bpl.n	8003812 <__swsetup_r+0x7a>
 80037ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037ee:	b141      	cbz	r1, 8003802 <__swsetup_r+0x6a>
 80037f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037f4:	4299      	cmp	r1, r3
 80037f6:	d002      	beq.n	80037fe <__swsetup_r+0x66>
 80037f8:	4630      	mov	r0, r6
 80037fa:	f000 fa5b 	bl	8003cb4 <_free_r>
 80037fe:	2300      	movs	r3, #0
 8003800:	6363      	str	r3, [r4, #52]	; 0x34
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003808:	81a3      	strh	r3, [r4, #12]
 800380a:	2300      	movs	r3, #0
 800380c:	6063      	str	r3, [r4, #4]
 800380e:	6923      	ldr	r3, [r4, #16]
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	f043 0308 	orr.w	r3, r3, #8
 8003818:	81a3      	strh	r3, [r4, #12]
 800381a:	6923      	ldr	r3, [r4, #16]
 800381c:	b94b      	cbnz	r3, 8003832 <__swsetup_r+0x9a>
 800381e:	89a3      	ldrh	r3, [r4, #12]
 8003820:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003828:	d003      	beq.n	8003832 <__swsetup_r+0x9a>
 800382a:	4621      	mov	r1, r4
 800382c:	4630      	mov	r0, r6
 800382e:	f000 fa01 	bl	8003c34 <__smakebuf_r>
 8003832:	89a0      	ldrh	r0, [r4, #12]
 8003834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003838:	f010 0301 	ands.w	r3, r0, #1
 800383c:	d00a      	beq.n	8003854 <__swsetup_r+0xbc>
 800383e:	2300      	movs	r3, #0
 8003840:	60a3      	str	r3, [r4, #8]
 8003842:	6963      	ldr	r3, [r4, #20]
 8003844:	425b      	negs	r3, r3
 8003846:	61a3      	str	r3, [r4, #24]
 8003848:	6923      	ldr	r3, [r4, #16]
 800384a:	b943      	cbnz	r3, 800385e <__swsetup_r+0xc6>
 800384c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003850:	d1ba      	bne.n	80037c8 <__swsetup_r+0x30>
 8003852:	bd70      	pop	{r4, r5, r6, pc}
 8003854:	0781      	lsls	r1, r0, #30
 8003856:	bf58      	it	pl
 8003858:	6963      	ldrpl	r3, [r4, #20]
 800385a:	60a3      	str	r3, [r4, #8]
 800385c:	e7f4      	b.n	8003848 <__swsetup_r+0xb0>
 800385e:	2000      	movs	r0, #0
 8003860:	e7f7      	b.n	8003852 <__swsetup_r+0xba>
 8003862:	bf00      	nop
 8003864:	2000000c 	.word	0x2000000c
 8003868:	080040dc 	.word	0x080040dc
 800386c:	080040fc 	.word	0x080040fc
 8003870:	080040bc 	.word	0x080040bc

08003874 <__sflush_r>:
 8003874:	898a      	ldrh	r2, [r1, #12]
 8003876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800387a:	4605      	mov	r5, r0
 800387c:	0710      	lsls	r0, r2, #28
 800387e:	460c      	mov	r4, r1
 8003880:	d458      	bmi.n	8003934 <__sflush_r+0xc0>
 8003882:	684b      	ldr	r3, [r1, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	dc05      	bgt.n	8003894 <__sflush_r+0x20>
 8003888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	dc02      	bgt.n	8003894 <__sflush_r+0x20>
 800388e:	2000      	movs	r0, #0
 8003890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003896:	2e00      	cmp	r6, #0
 8003898:	d0f9      	beq.n	800388e <__sflush_r+0x1a>
 800389a:	2300      	movs	r3, #0
 800389c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038a0:	682f      	ldr	r7, [r5, #0]
 80038a2:	602b      	str	r3, [r5, #0]
 80038a4:	d032      	beq.n	800390c <__sflush_r+0x98>
 80038a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038a8:	89a3      	ldrh	r3, [r4, #12]
 80038aa:	075a      	lsls	r2, r3, #29
 80038ac:	d505      	bpl.n	80038ba <__sflush_r+0x46>
 80038ae:	6863      	ldr	r3, [r4, #4]
 80038b0:	1ac0      	subs	r0, r0, r3
 80038b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038b4:	b10b      	cbz	r3, 80038ba <__sflush_r+0x46>
 80038b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038b8:	1ac0      	subs	r0, r0, r3
 80038ba:	2300      	movs	r3, #0
 80038bc:	4602      	mov	r2, r0
 80038be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038c0:	6a21      	ldr	r1, [r4, #32]
 80038c2:	4628      	mov	r0, r5
 80038c4:	47b0      	blx	r6
 80038c6:	1c43      	adds	r3, r0, #1
 80038c8:	89a3      	ldrh	r3, [r4, #12]
 80038ca:	d106      	bne.n	80038da <__sflush_r+0x66>
 80038cc:	6829      	ldr	r1, [r5, #0]
 80038ce:	291d      	cmp	r1, #29
 80038d0:	d82c      	bhi.n	800392c <__sflush_r+0xb8>
 80038d2:	4a2a      	ldr	r2, [pc, #168]	; (800397c <__sflush_r+0x108>)
 80038d4:	40ca      	lsrs	r2, r1
 80038d6:	07d6      	lsls	r6, r2, #31
 80038d8:	d528      	bpl.n	800392c <__sflush_r+0xb8>
 80038da:	2200      	movs	r2, #0
 80038dc:	6062      	str	r2, [r4, #4]
 80038de:	04d9      	lsls	r1, r3, #19
 80038e0:	6922      	ldr	r2, [r4, #16]
 80038e2:	6022      	str	r2, [r4, #0]
 80038e4:	d504      	bpl.n	80038f0 <__sflush_r+0x7c>
 80038e6:	1c42      	adds	r2, r0, #1
 80038e8:	d101      	bne.n	80038ee <__sflush_r+0x7a>
 80038ea:	682b      	ldr	r3, [r5, #0]
 80038ec:	b903      	cbnz	r3, 80038f0 <__sflush_r+0x7c>
 80038ee:	6560      	str	r0, [r4, #84]	; 0x54
 80038f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038f2:	602f      	str	r7, [r5, #0]
 80038f4:	2900      	cmp	r1, #0
 80038f6:	d0ca      	beq.n	800388e <__sflush_r+0x1a>
 80038f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038fc:	4299      	cmp	r1, r3
 80038fe:	d002      	beq.n	8003906 <__sflush_r+0x92>
 8003900:	4628      	mov	r0, r5
 8003902:	f000 f9d7 	bl	8003cb4 <_free_r>
 8003906:	2000      	movs	r0, #0
 8003908:	6360      	str	r0, [r4, #52]	; 0x34
 800390a:	e7c1      	b.n	8003890 <__sflush_r+0x1c>
 800390c:	6a21      	ldr	r1, [r4, #32]
 800390e:	2301      	movs	r3, #1
 8003910:	4628      	mov	r0, r5
 8003912:	47b0      	blx	r6
 8003914:	1c41      	adds	r1, r0, #1
 8003916:	d1c7      	bne.n	80038a8 <__sflush_r+0x34>
 8003918:	682b      	ldr	r3, [r5, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0c4      	beq.n	80038a8 <__sflush_r+0x34>
 800391e:	2b1d      	cmp	r3, #29
 8003920:	d001      	beq.n	8003926 <__sflush_r+0xb2>
 8003922:	2b16      	cmp	r3, #22
 8003924:	d101      	bne.n	800392a <__sflush_r+0xb6>
 8003926:	602f      	str	r7, [r5, #0]
 8003928:	e7b1      	b.n	800388e <__sflush_r+0x1a>
 800392a:	89a3      	ldrh	r3, [r4, #12]
 800392c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003930:	81a3      	strh	r3, [r4, #12]
 8003932:	e7ad      	b.n	8003890 <__sflush_r+0x1c>
 8003934:	690f      	ldr	r7, [r1, #16]
 8003936:	2f00      	cmp	r7, #0
 8003938:	d0a9      	beq.n	800388e <__sflush_r+0x1a>
 800393a:	0793      	lsls	r3, r2, #30
 800393c:	680e      	ldr	r6, [r1, #0]
 800393e:	bf08      	it	eq
 8003940:	694b      	ldreq	r3, [r1, #20]
 8003942:	600f      	str	r7, [r1, #0]
 8003944:	bf18      	it	ne
 8003946:	2300      	movne	r3, #0
 8003948:	eba6 0807 	sub.w	r8, r6, r7
 800394c:	608b      	str	r3, [r1, #8]
 800394e:	f1b8 0f00 	cmp.w	r8, #0
 8003952:	dd9c      	ble.n	800388e <__sflush_r+0x1a>
 8003954:	6a21      	ldr	r1, [r4, #32]
 8003956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003958:	4643      	mov	r3, r8
 800395a:	463a      	mov	r2, r7
 800395c:	4628      	mov	r0, r5
 800395e:	47b0      	blx	r6
 8003960:	2800      	cmp	r0, #0
 8003962:	dc06      	bgt.n	8003972 <__sflush_r+0xfe>
 8003964:	89a3      	ldrh	r3, [r4, #12]
 8003966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800396a:	81a3      	strh	r3, [r4, #12]
 800396c:	f04f 30ff 	mov.w	r0, #4294967295
 8003970:	e78e      	b.n	8003890 <__sflush_r+0x1c>
 8003972:	4407      	add	r7, r0
 8003974:	eba8 0800 	sub.w	r8, r8, r0
 8003978:	e7e9      	b.n	800394e <__sflush_r+0xda>
 800397a:	bf00      	nop
 800397c:	20400001 	.word	0x20400001

08003980 <_fflush_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	690b      	ldr	r3, [r1, #16]
 8003984:	4605      	mov	r5, r0
 8003986:	460c      	mov	r4, r1
 8003988:	b913      	cbnz	r3, 8003990 <_fflush_r+0x10>
 800398a:	2500      	movs	r5, #0
 800398c:	4628      	mov	r0, r5
 800398e:	bd38      	pop	{r3, r4, r5, pc}
 8003990:	b118      	cbz	r0, 800399a <_fflush_r+0x1a>
 8003992:	6983      	ldr	r3, [r0, #24]
 8003994:	b90b      	cbnz	r3, 800399a <_fflush_r+0x1a>
 8003996:	f000 f887 	bl	8003aa8 <__sinit>
 800399a:	4b14      	ldr	r3, [pc, #80]	; (80039ec <_fflush_r+0x6c>)
 800399c:	429c      	cmp	r4, r3
 800399e:	d11b      	bne.n	80039d8 <_fflush_r+0x58>
 80039a0:	686c      	ldr	r4, [r5, #4]
 80039a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0ef      	beq.n	800398a <_fflush_r+0xa>
 80039aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80039ac:	07d0      	lsls	r0, r2, #31
 80039ae:	d404      	bmi.n	80039ba <_fflush_r+0x3a>
 80039b0:	0599      	lsls	r1, r3, #22
 80039b2:	d402      	bmi.n	80039ba <_fflush_r+0x3a>
 80039b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039b6:	f000 f915 	bl	8003be4 <__retarget_lock_acquire_recursive>
 80039ba:	4628      	mov	r0, r5
 80039bc:	4621      	mov	r1, r4
 80039be:	f7ff ff59 	bl	8003874 <__sflush_r>
 80039c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039c4:	07da      	lsls	r2, r3, #31
 80039c6:	4605      	mov	r5, r0
 80039c8:	d4e0      	bmi.n	800398c <_fflush_r+0xc>
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	059b      	lsls	r3, r3, #22
 80039ce:	d4dd      	bmi.n	800398c <_fflush_r+0xc>
 80039d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039d2:	f000 f908 	bl	8003be6 <__retarget_lock_release_recursive>
 80039d6:	e7d9      	b.n	800398c <_fflush_r+0xc>
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <_fflush_r+0x70>)
 80039da:	429c      	cmp	r4, r3
 80039dc:	d101      	bne.n	80039e2 <_fflush_r+0x62>
 80039de:	68ac      	ldr	r4, [r5, #8]
 80039e0:	e7df      	b.n	80039a2 <_fflush_r+0x22>
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <_fflush_r+0x74>)
 80039e4:	429c      	cmp	r4, r3
 80039e6:	bf08      	it	eq
 80039e8:	68ec      	ldreq	r4, [r5, #12]
 80039ea:	e7da      	b.n	80039a2 <_fflush_r+0x22>
 80039ec:	080040dc 	.word	0x080040dc
 80039f0:	080040fc 	.word	0x080040fc
 80039f4:	080040bc 	.word	0x080040bc

080039f8 <std>:
 80039f8:	2300      	movs	r3, #0
 80039fa:	b510      	push	{r4, lr}
 80039fc:	4604      	mov	r4, r0
 80039fe:	e9c0 3300 	strd	r3, r3, [r0]
 8003a02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a06:	6083      	str	r3, [r0, #8]
 8003a08:	8181      	strh	r1, [r0, #12]
 8003a0a:	6643      	str	r3, [r0, #100]	; 0x64
 8003a0c:	81c2      	strh	r2, [r0, #14]
 8003a0e:	6183      	str	r3, [r0, #24]
 8003a10:	4619      	mov	r1, r3
 8003a12:	2208      	movs	r2, #8
 8003a14:	305c      	adds	r0, #92	; 0x5c
 8003a16:	f7ff fdef 	bl	80035f8 <memset>
 8003a1a:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <std+0x38>)
 8003a1c:	6263      	str	r3, [r4, #36]	; 0x24
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <std+0x3c>)
 8003a20:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <std+0x40>)
 8003a24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a26:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <std+0x44>)
 8003a28:	6224      	str	r4, [r4, #32]
 8003a2a:	6323      	str	r3, [r4, #48]	; 0x30
 8003a2c:	bd10      	pop	{r4, pc}
 8003a2e:	bf00      	nop
 8003a30:	08003e95 	.word	0x08003e95
 8003a34:	08003eb7 	.word	0x08003eb7
 8003a38:	08003eef 	.word	0x08003eef
 8003a3c:	08003f13 	.word	0x08003f13

08003a40 <_cleanup_r>:
 8003a40:	4901      	ldr	r1, [pc, #4]	; (8003a48 <_cleanup_r+0x8>)
 8003a42:	f000 b8af 	b.w	8003ba4 <_fwalk_reent>
 8003a46:	bf00      	nop
 8003a48:	08003981 	.word	0x08003981

08003a4c <__sfmoreglue>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	2268      	movs	r2, #104	; 0x68
 8003a50:	1e4d      	subs	r5, r1, #1
 8003a52:	4355      	muls	r5, r2
 8003a54:	460e      	mov	r6, r1
 8003a56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a5a:	f000 f997 	bl	8003d8c <_malloc_r>
 8003a5e:	4604      	mov	r4, r0
 8003a60:	b140      	cbz	r0, 8003a74 <__sfmoreglue+0x28>
 8003a62:	2100      	movs	r1, #0
 8003a64:	e9c0 1600 	strd	r1, r6, [r0]
 8003a68:	300c      	adds	r0, #12
 8003a6a:	60a0      	str	r0, [r4, #8]
 8003a6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a70:	f7ff fdc2 	bl	80035f8 <memset>
 8003a74:	4620      	mov	r0, r4
 8003a76:	bd70      	pop	{r4, r5, r6, pc}

08003a78 <__sfp_lock_acquire>:
 8003a78:	4801      	ldr	r0, [pc, #4]	; (8003a80 <__sfp_lock_acquire+0x8>)
 8003a7a:	f000 b8b3 	b.w	8003be4 <__retarget_lock_acquire_recursive>
 8003a7e:	bf00      	nop
 8003a80:	20000165 	.word	0x20000165

08003a84 <__sfp_lock_release>:
 8003a84:	4801      	ldr	r0, [pc, #4]	; (8003a8c <__sfp_lock_release+0x8>)
 8003a86:	f000 b8ae 	b.w	8003be6 <__retarget_lock_release_recursive>
 8003a8a:	bf00      	nop
 8003a8c:	20000165 	.word	0x20000165

08003a90 <__sinit_lock_acquire>:
 8003a90:	4801      	ldr	r0, [pc, #4]	; (8003a98 <__sinit_lock_acquire+0x8>)
 8003a92:	f000 b8a7 	b.w	8003be4 <__retarget_lock_acquire_recursive>
 8003a96:	bf00      	nop
 8003a98:	20000166 	.word	0x20000166

08003a9c <__sinit_lock_release>:
 8003a9c:	4801      	ldr	r0, [pc, #4]	; (8003aa4 <__sinit_lock_release+0x8>)
 8003a9e:	f000 b8a2 	b.w	8003be6 <__retarget_lock_release_recursive>
 8003aa2:	bf00      	nop
 8003aa4:	20000166 	.word	0x20000166

08003aa8 <__sinit>:
 8003aa8:	b510      	push	{r4, lr}
 8003aaa:	4604      	mov	r4, r0
 8003aac:	f7ff fff0 	bl	8003a90 <__sinit_lock_acquire>
 8003ab0:	69a3      	ldr	r3, [r4, #24]
 8003ab2:	b11b      	cbz	r3, 8003abc <__sinit+0x14>
 8003ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ab8:	f7ff bff0 	b.w	8003a9c <__sinit_lock_release>
 8003abc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003ac0:	6523      	str	r3, [r4, #80]	; 0x50
 8003ac2:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <__sinit+0x68>)
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <__sinit+0x6c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	62a2      	str	r2, [r4, #40]	; 0x28
 8003aca:	42a3      	cmp	r3, r4
 8003acc:	bf04      	itt	eq
 8003ace:	2301      	moveq	r3, #1
 8003ad0:	61a3      	streq	r3, [r4, #24]
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f000 f820 	bl	8003b18 <__sfp>
 8003ad8:	6060      	str	r0, [r4, #4]
 8003ada:	4620      	mov	r0, r4
 8003adc:	f000 f81c 	bl	8003b18 <__sfp>
 8003ae0:	60a0      	str	r0, [r4, #8]
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f000 f818 	bl	8003b18 <__sfp>
 8003ae8:	2200      	movs	r2, #0
 8003aea:	60e0      	str	r0, [r4, #12]
 8003aec:	2104      	movs	r1, #4
 8003aee:	6860      	ldr	r0, [r4, #4]
 8003af0:	f7ff ff82 	bl	80039f8 <std>
 8003af4:	68a0      	ldr	r0, [r4, #8]
 8003af6:	2201      	movs	r2, #1
 8003af8:	2109      	movs	r1, #9
 8003afa:	f7ff ff7d 	bl	80039f8 <std>
 8003afe:	68e0      	ldr	r0, [r4, #12]
 8003b00:	2202      	movs	r2, #2
 8003b02:	2112      	movs	r1, #18
 8003b04:	f7ff ff78 	bl	80039f8 <std>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	61a3      	str	r3, [r4, #24]
 8003b0c:	e7d2      	b.n	8003ab4 <__sinit+0xc>
 8003b0e:	bf00      	nop
 8003b10:	080040b8 	.word	0x080040b8
 8003b14:	08003a41 	.word	0x08003a41

08003b18 <__sfp>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	4607      	mov	r7, r0
 8003b1c:	f7ff ffac 	bl	8003a78 <__sfp_lock_acquire>
 8003b20:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <__sfp+0x84>)
 8003b22:	681e      	ldr	r6, [r3, #0]
 8003b24:	69b3      	ldr	r3, [r6, #24]
 8003b26:	b913      	cbnz	r3, 8003b2e <__sfp+0x16>
 8003b28:	4630      	mov	r0, r6
 8003b2a:	f7ff ffbd 	bl	8003aa8 <__sinit>
 8003b2e:	3648      	adds	r6, #72	; 0x48
 8003b30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	d503      	bpl.n	8003b40 <__sfp+0x28>
 8003b38:	6833      	ldr	r3, [r6, #0]
 8003b3a:	b30b      	cbz	r3, 8003b80 <__sfp+0x68>
 8003b3c:	6836      	ldr	r6, [r6, #0]
 8003b3e:	e7f7      	b.n	8003b30 <__sfp+0x18>
 8003b40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b44:	b9d5      	cbnz	r5, 8003b7c <__sfp+0x64>
 8003b46:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <__sfp+0x88>)
 8003b48:	60e3      	str	r3, [r4, #12]
 8003b4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b4e:	6665      	str	r5, [r4, #100]	; 0x64
 8003b50:	f000 f847 	bl	8003be2 <__retarget_lock_init_recursive>
 8003b54:	f7ff ff96 	bl	8003a84 <__sfp_lock_release>
 8003b58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b60:	6025      	str	r5, [r4, #0]
 8003b62:	61a5      	str	r5, [r4, #24]
 8003b64:	2208      	movs	r2, #8
 8003b66:	4629      	mov	r1, r5
 8003b68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b6c:	f7ff fd44 	bl	80035f8 <memset>
 8003b70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b78:	4620      	mov	r0, r4
 8003b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b7c:	3468      	adds	r4, #104	; 0x68
 8003b7e:	e7d9      	b.n	8003b34 <__sfp+0x1c>
 8003b80:	2104      	movs	r1, #4
 8003b82:	4638      	mov	r0, r7
 8003b84:	f7ff ff62 	bl	8003a4c <__sfmoreglue>
 8003b88:	4604      	mov	r4, r0
 8003b8a:	6030      	str	r0, [r6, #0]
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	d1d5      	bne.n	8003b3c <__sfp+0x24>
 8003b90:	f7ff ff78 	bl	8003a84 <__sfp_lock_release>
 8003b94:	230c      	movs	r3, #12
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	e7ee      	b.n	8003b78 <__sfp+0x60>
 8003b9a:	bf00      	nop
 8003b9c:	080040b8 	.word	0x080040b8
 8003ba0:	ffff0001 	.word	0xffff0001

08003ba4 <_fwalk_reent>:
 8003ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ba8:	4606      	mov	r6, r0
 8003baa:	4688      	mov	r8, r1
 8003bac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003bb0:	2700      	movs	r7, #0
 8003bb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bb6:	f1b9 0901 	subs.w	r9, r9, #1
 8003bba:	d505      	bpl.n	8003bc8 <_fwalk_reent+0x24>
 8003bbc:	6824      	ldr	r4, [r4, #0]
 8003bbe:	2c00      	cmp	r4, #0
 8003bc0:	d1f7      	bne.n	8003bb2 <_fwalk_reent+0xe>
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bc8:	89ab      	ldrh	r3, [r5, #12]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d907      	bls.n	8003bde <_fwalk_reent+0x3a>
 8003bce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	d003      	beq.n	8003bde <_fwalk_reent+0x3a>
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	4630      	mov	r0, r6
 8003bda:	47c0      	blx	r8
 8003bdc:	4307      	orrs	r7, r0
 8003bde:	3568      	adds	r5, #104	; 0x68
 8003be0:	e7e9      	b.n	8003bb6 <_fwalk_reent+0x12>

08003be2 <__retarget_lock_init_recursive>:
 8003be2:	4770      	bx	lr

08003be4 <__retarget_lock_acquire_recursive>:
 8003be4:	4770      	bx	lr

08003be6 <__retarget_lock_release_recursive>:
 8003be6:	4770      	bx	lr

08003be8 <__swhatbuf_r>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	460e      	mov	r6, r1
 8003bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf0:	2900      	cmp	r1, #0
 8003bf2:	b096      	sub	sp, #88	; 0x58
 8003bf4:	4614      	mov	r4, r2
 8003bf6:	461d      	mov	r5, r3
 8003bf8:	da08      	bge.n	8003c0c <__swhatbuf_r+0x24>
 8003bfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	602a      	str	r2, [r5, #0]
 8003c02:	061a      	lsls	r2, r3, #24
 8003c04:	d410      	bmi.n	8003c28 <__swhatbuf_r+0x40>
 8003c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c0a:	e00e      	b.n	8003c2a <__swhatbuf_r+0x42>
 8003c0c:	466a      	mov	r2, sp
 8003c0e:	f000 f9a7 	bl	8003f60 <_fstat_r>
 8003c12:	2800      	cmp	r0, #0
 8003c14:	dbf1      	blt.n	8003bfa <__swhatbuf_r+0x12>
 8003c16:	9a01      	ldr	r2, [sp, #4]
 8003c18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c20:	425a      	negs	r2, r3
 8003c22:	415a      	adcs	r2, r3
 8003c24:	602a      	str	r2, [r5, #0]
 8003c26:	e7ee      	b.n	8003c06 <__swhatbuf_r+0x1e>
 8003c28:	2340      	movs	r3, #64	; 0x40
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	6023      	str	r3, [r4, #0]
 8003c2e:	b016      	add	sp, #88	; 0x58
 8003c30:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c34 <__smakebuf_r>:
 8003c34:	898b      	ldrh	r3, [r1, #12]
 8003c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c38:	079d      	lsls	r5, r3, #30
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	d507      	bpl.n	8003c50 <__smakebuf_r+0x1c>
 8003c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	6123      	str	r3, [r4, #16]
 8003c48:	2301      	movs	r3, #1
 8003c4a:	6163      	str	r3, [r4, #20]
 8003c4c:	b002      	add	sp, #8
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}
 8003c50:	ab01      	add	r3, sp, #4
 8003c52:	466a      	mov	r2, sp
 8003c54:	f7ff ffc8 	bl	8003be8 <__swhatbuf_r>
 8003c58:	9900      	ldr	r1, [sp, #0]
 8003c5a:	4605      	mov	r5, r0
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	f000 f895 	bl	8003d8c <_malloc_r>
 8003c62:	b948      	cbnz	r0, 8003c78 <__smakebuf_r+0x44>
 8003c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c68:	059a      	lsls	r2, r3, #22
 8003c6a:	d4ef      	bmi.n	8003c4c <__smakebuf_r+0x18>
 8003c6c:	f023 0303 	bic.w	r3, r3, #3
 8003c70:	f043 0302 	orr.w	r3, r3, #2
 8003c74:	81a3      	strh	r3, [r4, #12]
 8003c76:	e7e3      	b.n	8003c40 <__smakebuf_r+0xc>
 8003c78:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <__smakebuf_r+0x7c>)
 8003c7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c7c:	89a3      	ldrh	r3, [r4, #12]
 8003c7e:	6020      	str	r0, [r4, #0]
 8003c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c84:	81a3      	strh	r3, [r4, #12]
 8003c86:	9b00      	ldr	r3, [sp, #0]
 8003c88:	6163      	str	r3, [r4, #20]
 8003c8a:	9b01      	ldr	r3, [sp, #4]
 8003c8c:	6120      	str	r0, [r4, #16]
 8003c8e:	b15b      	cbz	r3, 8003ca8 <__smakebuf_r+0x74>
 8003c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c94:	4630      	mov	r0, r6
 8003c96:	f000 f975 	bl	8003f84 <_isatty_r>
 8003c9a:	b128      	cbz	r0, 8003ca8 <__smakebuf_r+0x74>
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	f023 0303 	bic.w	r3, r3, #3
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	81a3      	strh	r3, [r4, #12]
 8003ca8:	89a0      	ldrh	r0, [r4, #12]
 8003caa:	4305      	orrs	r5, r0
 8003cac:	81a5      	strh	r5, [r4, #12]
 8003cae:	e7cd      	b.n	8003c4c <__smakebuf_r+0x18>
 8003cb0:	08003a41 	.word	0x08003a41

08003cb4 <_free_r>:
 8003cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cb6:	2900      	cmp	r1, #0
 8003cb8:	d044      	beq.n	8003d44 <_free_r+0x90>
 8003cba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cbe:	9001      	str	r0, [sp, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f1a1 0404 	sub.w	r4, r1, #4
 8003cc6:	bfb8      	it	lt
 8003cc8:	18e4      	addlt	r4, r4, r3
 8003cca:	f000 f97d 	bl	8003fc8 <__malloc_lock>
 8003cce:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <_free_r+0x94>)
 8003cd0:	9801      	ldr	r0, [sp, #4]
 8003cd2:	6813      	ldr	r3, [r2, #0]
 8003cd4:	b933      	cbnz	r3, 8003ce4 <_free_r+0x30>
 8003cd6:	6063      	str	r3, [r4, #4]
 8003cd8:	6014      	str	r4, [r2, #0]
 8003cda:	b003      	add	sp, #12
 8003cdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ce0:	f000 b978 	b.w	8003fd4 <__malloc_unlock>
 8003ce4:	42a3      	cmp	r3, r4
 8003ce6:	d908      	bls.n	8003cfa <_free_r+0x46>
 8003ce8:	6825      	ldr	r5, [r4, #0]
 8003cea:	1961      	adds	r1, r4, r5
 8003cec:	428b      	cmp	r3, r1
 8003cee:	bf01      	itttt	eq
 8003cf0:	6819      	ldreq	r1, [r3, #0]
 8003cf2:	685b      	ldreq	r3, [r3, #4]
 8003cf4:	1949      	addeq	r1, r1, r5
 8003cf6:	6021      	streq	r1, [r4, #0]
 8003cf8:	e7ed      	b.n	8003cd6 <_free_r+0x22>
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	b10b      	cbz	r3, 8003d04 <_free_r+0x50>
 8003d00:	42a3      	cmp	r3, r4
 8003d02:	d9fa      	bls.n	8003cfa <_free_r+0x46>
 8003d04:	6811      	ldr	r1, [r2, #0]
 8003d06:	1855      	adds	r5, r2, r1
 8003d08:	42a5      	cmp	r5, r4
 8003d0a:	d10b      	bne.n	8003d24 <_free_r+0x70>
 8003d0c:	6824      	ldr	r4, [r4, #0]
 8003d0e:	4421      	add	r1, r4
 8003d10:	1854      	adds	r4, r2, r1
 8003d12:	42a3      	cmp	r3, r4
 8003d14:	6011      	str	r1, [r2, #0]
 8003d16:	d1e0      	bne.n	8003cda <_free_r+0x26>
 8003d18:	681c      	ldr	r4, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	6053      	str	r3, [r2, #4]
 8003d1e:	4421      	add	r1, r4
 8003d20:	6011      	str	r1, [r2, #0]
 8003d22:	e7da      	b.n	8003cda <_free_r+0x26>
 8003d24:	d902      	bls.n	8003d2c <_free_r+0x78>
 8003d26:	230c      	movs	r3, #12
 8003d28:	6003      	str	r3, [r0, #0]
 8003d2a:	e7d6      	b.n	8003cda <_free_r+0x26>
 8003d2c:	6825      	ldr	r5, [r4, #0]
 8003d2e:	1961      	adds	r1, r4, r5
 8003d30:	428b      	cmp	r3, r1
 8003d32:	bf04      	itt	eq
 8003d34:	6819      	ldreq	r1, [r3, #0]
 8003d36:	685b      	ldreq	r3, [r3, #4]
 8003d38:	6063      	str	r3, [r4, #4]
 8003d3a:	bf04      	itt	eq
 8003d3c:	1949      	addeq	r1, r1, r5
 8003d3e:	6021      	streq	r1, [r4, #0]
 8003d40:	6054      	str	r4, [r2, #4]
 8003d42:	e7ca      	b.n	8003cda <_free_r+0x26>
 8003d44:	b003      	add	sp, #12
 8003d46:	bd30      	pop	{r4, r5, pc}
 8003d48:	20000168 	.word	0x20000168

08003d4c <sbrk_aligned>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	4e0e      	ldr	r6, [pc, #56]	; (8003d88 <sbrk_aligned+0x3c>)
 8003d50:	460c      	mov	r4, r1
 8003d52:	6831      	ldr	r1, [r6, #0]
 8003d54:	4605      	mov	r5, r0
 8003d56:	b911      	cbnz	r1, 8003d5e <sbrk_aligned+0x12>
 8003d58:	f000 f88c 	bl	8003e74 <_sbrk_r>
 8003d5c:	6030      	str	r0, [r6, #0]
 8003d5e:	4621      	mov	r1, r4
 8003d60:	4628      	mov	r0, r5
 8003d62:	f000 f887 	bl	8003e74 <_sbrk_r>
 8003d66:	1c43      	adds	r3, r0, #1
 8003d68:	d00a      	beq.n	8003d80 <sbrk_aligned+0x34>
 8003d6a:	1cc4      	adds	r4, r0, #3
 8003d6c:	f024 0403 	bic.w	r4, r4, #3
 8003d70:	42a0      	cmp	r0, r4
 8003d72:	d007      	beq.n	8003d84 <sbrk_aligned+0x38>
 8003d74:	1a21      	subs	r1, r4, r0
 8003d76:	4628      	mov	r0, r5
 8003d78:	f000 f87c 	bl	8003e74 <_sbrk_r>
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	d101      	bne.n	8003d84 <sbrk_aligned+0x38>
 8003d80:	f04f 34ff 	mov.w	r4, #4294967295
 8003d84:	4620      	mov	r0, r4
 8003d86:	bd70      	pop	{r4, r5, r6, pc}
 8003d88:	2000016c 	.word	0x2000016c

08003d8c <_malloc_r>:
 8003d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d90:	1ccd      	adds	r5, r1, #3
 8003d92:	f025 0503 	bic.w	r5, r5, #3
 8003d96:	3508      	adds	r5, #8
 8003d98:	2d0c      	cmp	r5, #12
 8003d9a:	bf38      	it	cc
 8003d9c:	250c      	movcc	r5, #12
 8003d9e:	2d00      	cmp	r5, #0
 8003da0:	4607      	mov	r7, r0
 8003da2:	db01      	blt.n	8003da8 <_malloc_r+0x1c>
 8003da4:	42a9      	cmp	r1, r5
 8003da6:	d905      	bls.n	8003db4 <_malloc_r+0x28>
 8003da8:	230c      	movs	r3, #12
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	2600      	movs	r6, #0
 8003dae:	4630      	mov	r0, r6
 8003db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003db4:	4e2e      	ldr	r6, [pc, #184]	; (8003e70 <_malloc_r+0xe4>)
 8003db6:	f000 f907 	bl	8003fc8 <__malloc_lock>
 8003dba:	6833      	ldr	r3, [r6, #0]
 8003dbc:	461c      	mov	r4, r3
 8003dbe:	bb34      	cbnz	r4, 8003e0e <_malloc_r+0x82>
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	f7ff ffc2 	bl	8003d4c <sbrk_aligned>
 8003dc8:	1c43      	adds	r3, r0, #1
 8003dca:	4604      	mov	r4, r0
 8003dcc:	d14d      	bne.n	8003e6a <_malloc_r+0xde>
 8003dce:	6834      	ldr	r4, [r6, #0]
 8003dd0:	4626      	mov	r6, r4
 8003dd2:	2e00      	cmp	r6, #0
 8003dd4:	d140      	bne.n	8003e58 <_malloc_r+0xcc>
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	4631      	mov	r1, r6
 8003dda:	4638      	mov	r0, r7
 8003ddc:	eb04 0803 	add.w	r8, r4, r3
 8003de0:	f000 f848 	bl	8003e74 <_sbrk_r>
 8003de4:	4580      	cmp	r8, r0
 8003de6:	d13a      	bne.n	8003e5e <_malloc_r+0xd2>
 8003de8:	6821      	ldr	r1, [r4, #0]
 8003dea:	3503      	adds	r5, #3
 8003dec:	1a6d      	subs	r5, r5, r1
 8003dee:	f025 0503 	bic.w	r5, r5, #3
 8003df2:	3508      	adds	r5, #8
 8003df4:	2d0c      	cmp	r5, #12
 8003df6:	bf38      	it	cc
 8003df8:	250c      	movcc	r5, #12
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	4638      	mov	r0, r7
 8003dfe:	f7ff ffa5 	bl	8003d4c <sbrk_aligned>
 8003e02:	3001      	adds	r0, #1
 8003e04:	d02b      	beq.n	8003e5e <_malloc_r+0xd2>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	442b      	add	r3, r5
 8003e0a:	6023      	str	r3, [r4, #0]
 8003e0c:	e00e      	b.n	8003e2c <_malloc_r+0xa0>
 8003e0e:	6822      	ldr	r2, [r4, #0]
 8003e10:	1b52      	subs	r2, r2, r5
 8003e12:	d41e      	bmi.n	8003e52 <_malloc_r+0xc6>
 8003e14:	2a0b      	cmp	r2, #11
 8003e16:	d916      	bls.n	8003e46 <_malloc_r+0xba>
 8003e18:	1961      	adds	r1, r4, r5
 8003e1a:	42a3      	cmp	r3, r4
 8003e1c:	6025      	str	r5, [r4, #0]
 8003e1e:	bf18      	it	ne
 8003e20:	6059      	strne	r1, [r3, #4]
 8003e22:	6863      	ldr	r3, [r4, #4]
 8003e24:	bf08      	it	eq
 8003e26:	6031      	streq	r1, [r6, #0]
 8003e28:	5162      	str	r2, [r4, r5]
 8003e2a:	604b      	str	r3, [r1, #4]
 8003e2c:	4638      	mov	r0, r7
 8003e2e:	f104 060b 	add.w	r6, r4, #11
 8003e32:	f000 f8cf 	bl	8003fd4 <__malloc_unlock>
 8003e36:	f026 0607 	bic.w	r6, r6, #7
 8003e3a:	1d23      	adds	r3, r4, #4
 8003e3c:	1af2      	subs	r2, r6, r3
 8003e3e:	d0b6      	beq.n	8003dae <_malloc_r+0x22>
 8003e40:	1b9b      	subs	r3, r3, r6
 8003e42:	50a3      	str	r3, [r4, r2]
 8003e44:	e7b3      	b.n	8003dae <_malloc_r+0x22>
 8003e46:	6862      	ldr	r2, [r4, #4]
 8003e48:	42a3      	cmp	r3, r4
 8003e4a:	bf0c      	ite	eq
 8003e4c:	6032      	streq	r2, [r6, #0]
 8003e4e:	605a      	strne	r2, [r3, #4]
 8003e50:	e7ec      	b.n	8003e2c <_malloc_r+0xa0>
 8003e52:	4623      	mov	r3, r4
 8003e54:	6864      	ldr	r4, [r4, #4]
 8003e56:	e7b2      	b.n	8003dbe <_malloc_r+0x32>
 8003e58:	4634      	mov	r4, r6
 8003e5a:	6876      	ldr	r6, [r6, #4]
 8003e5c:	e7b9      	b.n	8003dd2 <_malloc_r+0x46>
 8003e5e:	230c      	movs	r3, #12
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	4638      	mov	r0, r7
 8003e64:	f000 f8b6 	bl	8003fd4 <__malloc_unlock>
 8003e68:	e7a1      	b.n	8003dae <_malloc_r+0x22>
 8003e6a:	6025      	str	r5, [r4, #0]
 8003e6c:	e7de      	b.n	8003e2c <_malloc_r+0xa0>
 8003e6e:	bf00      	nop
 8003e70:	20000168 	.word	0x20000168

08003e74 <_sbrk_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4d06      	ldr	r5, [pc, #24]	; (8003e90 <_sbrk_r+0x1c>)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	f7fc fe3c 	bl	8000afc <_sbrk>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d102      	bne.n	8003e8e <_sbrk_r+0x1a>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	b103      	cbz	r3, 8003e8e <_sbrk_r+0x1a>
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
 8003e90:	20000170 	.word	0x20000170

08003e94 <__sread>:
 8003e94:	b510      	push	{r4, lr}
 8003e96:	460c      	mov	r4, r1
 8003e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e9c:	f000 f8a0 	bl	8003fe0 <_read_r>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	bfab      	itete	ge
 8003ea4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ea6:	89a3      	ldrhlt	r3, [r4, #12]
 8003ea8:	181b      	addge	r3, r3, r0
 8003eaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003eae:	bfac      	ite	ge
 8003eb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003eb2:	81a3      	strhlt	r3, [r4, #12]
 8003eb4:	bd10      	pop	{r4, pc}

08003eb6 <__swrite>:
 8003eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eba:	461f      	mov	r7, r3
 8003ebc:	898b      	ldrh	r3, [r1, #12]
 8003ebe:	05db      	lsls	r3, r3, #23
 8003ec0:	4605      	mov	r5, r0
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	4616      	mov	r6, r2
 8003ec6:	d505      	bpl.n	8003ed4 <__swrite+0x1e>
 8003ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ecc:	2302      	movs	r3, #2
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f000 f868 	bl	8003fa4 <_lseek_r>
 8003ed4:	89a3      	ldrh	r3, [r4, #12]
 8003ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ede:	81a3      	strh	r3, [r4, #12]
 8003ee0:	4632      	mov	r2, r6
 8003ee2:	463b      	mov	r3, r7
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eea:	f000 b817 	b.w	8003f1c <_write_r>

08003eee <__sseek>:
 8003eee:	b510      	push	{r4, lr}
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef6:	f000 f855 	bl	8003fa4 <_lseek_r>
 8003efa:	1c43      	adds	r3, r0, #1
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	bf15      	itete	ne
 8003f00:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f0a:	81a3      	strheq	r3, [r4, #12]
 8003f0c:	bf18      	it	ne
 8003f0e:	81a3      	strhne	r3, [r4, #12]
 8003f10:	bd10      	pop	{r4, pc}

08003f12 <__sclose>:
 8003f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f16:	f000 b813 	b.w	8003f40 <_close_r>
	...

08003f1c <_write_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4d07      	ldr	r5, [pc, #28]	; (8003f3c <_write_r+0x20>)
 8003f20:	4604      	mov	r4, r0
 8003f22:	4608      	mov	r0, r1
 8003f24:	4611      	mov	r1, r2
 8003f26:	2200      	movs	r2, #0
 8003f28:	602a      	str	r2, [r5, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f7fc fd95 	bl	8000a5a <_write>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d102      	bne.n	8003f3a <_write_r+0x1e>
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	b103      	cbz	r3, 8003f3a <_write_r+0x1e>
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
 8003f3c:	20000170 	.word	0x20000170

08003f40 <_close_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4d06      	ldr	r5, [pc, #24]	; (8003f5c <_close_r+0x1c>)
 8003f44:	2300      	movs	r3, #0
 8003f46:	4604      	mov	r4, r0
 8003f48:	4608      	mov	r0, r1
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	f7fc fda1 	bl	8000a92 <_close>
 8003f50:	1c43      	adds	r3, r0, #1
 8003f52:	d102      	bne.n	8003f5a <_close_r+0x1a>
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	b103      	cbz	r3, 8003f5a <_close_r+0x1a>
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	bd38      	pop	{r3, r4, r5, pc}
 8003f5c:	20000170 	.word	0x20000170

08003f60 <_fstat_r>:
 8003f60:	b538      	push	{r3, r4, r5, lr}
 8003f62:	4d07      	ldr	r5, [pc, #28]	; (8003f80 <_fstat_r+0x20>)
 8003f64:	2300      	movs	r3, #0
 8003f66:	4604      	mov	r4, r0
 8003f68:	4608      	mov	r0, r1
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	602b      	str	r3, [r5, #0]
 8003f6e:	f7fc fd9c 	bl	8000aaa <_fstat>
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	d102      	bne.n	8003f7c <_fstat_r+0x1c>
 8003f76:	682b      	ldr	r3, [r5, #0]
 8003f78:	b103      	cbz	r3, 8003f7c <_fstat_r+0x1c>
 8003f7a:	6023      	str	r3, [r4, #0]
 8003f7c:	bd38      	pop	{r3, r4, r5, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000170 	.word	0x20000170

08003f84 <_isatty_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4d06      	ldr	r5, [pc, #24]	; (8003fa0 <_isatty_r+0x1c>)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	602b      	str	r3, [r5, #0]
 8003f90:	f7fc fd9b 	bl	8000aca <_isatty>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_isatty_r+0x1a>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_isatty_r+0x1a>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	20000170 	.word	0x20000170

08003fa4 <_lseek_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4d07      	ldr	r5, [pc, #28]	; (8003fc4 <_lseek_r+0x20>)
 8003fa8:	4604      	mov	r4, r0
 8003faa:	4608      	mov	r0, r1
 8003fac:	4611      	mov	r1, r2
 8003fae:	2200      	movs	r2, #0
 8003fb0:	602a      	str	r2, [r5, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f7fc fd94 	bl	8000ae0 <_lseek>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_lseek_r+0x1e>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_lseek_r+0x1e>
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	20000170 	.word	0x20000170

08003fc8 <__malloc_lock>:
 8003fc8:	4801      	ldr	r0, [pc, #4]	; (8003fd0 <__malloc_lock+0x8>)
 8003fca:	f7ff be0b 	b.w	8003be4 <__retarget_lock_acquire_recursive>
 8003fce:	bf00      	nop
 8003fd0:	20000164 	.word	0x20000164

08003fd4 <__malloc_unlock>:
 8003fd4:	4801      	ldr	r0, [pc, #4]	; (8003fdc <__malloc_unlock+0x8>)
 8003fd6:	f7ff be06 	b.w	8003be6 <__retarget_lock_release_recursive>
 8003fda:	bf00      	nop
 8003fdc:	20000164 	.word	0x20000164

08003fe0 <_read_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4d07      	ldr	r5, [pc, #28]	; (8004000 <_read_r+0x20>)
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	4608      	mov	r0, r1
 8003fe8:	4611      	mov	r1, r2
 8003fea:	2200      	movs	r2, #0
 8003fec:	602a      	str	r2, [r5, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f7fc fd16 	bl	8000a20 <_read>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	d102      	bne.n	8003ffe <_read_r+0x1e>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	b103      	cbz	r3, 8003ffe <_read_r+0x1e>
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	20000170 	.word	0x20000170

08004004 <_init>:
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	bf00      	nop
 8004008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400a:	bc08      	pop	{r3}
 800400c:	469e      	mov	lr, r3
 800400e:	4770      	bx	lr

08004010 <_fini>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	bf00      	nop
 8004014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004016:	bc08      	pop	{r3}
 8004018:	469e      	mov	lr, r3
 800401a:	4770      	bx	lr
